[{"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/serviceWorker.js":"1","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/DataSource.js":"2","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/MoneyTab.js":"3","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/ChatTab.js":"4","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/URL.js":"5","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/FakeDataSource.js":"6","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/UserSearchDialog.js":"7","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/Search.js":"8","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/history_pb.js":"9","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/app/reducer.js":"10","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/UploadButtons.js":"11","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/internal_message_pb.js":"12","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/app/store.js":"13","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/Label.js":"14","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/chat_content_pb.js":"15","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/index.js":"16","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/TabPanel.js":"17","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/WebSocket.js":"18","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/payload_pb.js":"19","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/ConnectTab.js":"20","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/App.js":"21","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/MessageControl.js":"22","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/SignIn.js":"23","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/TransactionHistory.js":"24"},{"size":5141,"mtime":1607962143147,"results":"25","hashOfConfig":"26"},{"size":10436,"mtime":1608660374279,"results":"27","hashOfConfig":"26"},{"size":6531,"mtime":1608664898946,"results":"28","hashOfConfig":"26"},{"size":7321,"mtime":1608661057692,"results":"29","hashOfConfig":"26"},{"size":2072,"mtime":1608632253882,"results":"30","hashOfConfig":"26"},{"size":5841,"mtime":1608481665655,"results":"31","hashOfConfig":"26"},{"size":4892,"mtime":1608660599892,"results":"32","hashOfConfig":"26"},{"size":2051,"mtime":1608474075450,"results":"33","hashOfConfig":"26"},{"size":11162,"mtime":1608488251964,"results":"34","hashOfConfig":"26"},{"size":3914,"mtime":1608638413575,"results":"35","hashOfConfig":"26"},{"size":1059,"mtime":1608468509586,"results":"36","hashOfConfig":"26"},{"size":59623,"mtime":1608488214247,"results":"37","hashOfConfig":"26"},{"size":202,"mtime":1608385034521,"results":"38","hashOfConfig":"26"},{"size":10520,"mtime":1608664994229,"results":"39","hashOfConfig":"26"},{"size":6548,"mtime":1608488236830,"results":"40","hashOfConfig":"26"},{"size":673,"mtime":1608385258164,"results":"41","hashOfConfig":"26"},{"size":773,"mtime":1608470661713,"results":"42","hashOfConfig":"26"},{"size":1132,"mtime":1608530163227,"results":"43","hashOfConfig":"26"},{"size":21658,"mtime":1608488157771,"results":"44","hashOfConfig":"26"},{"size":7062,"mtime":1608665774589,"results":"45","hashOfConfig":"26"},{"size":4872,"mtime":1608646247290,"results":"46","hashOfConfig":"26"},{"size":18679,"mtime":1608656522136,"results":"47","hashOfConfig":"26"},{"size":3818,"mtime":1608631814040,"results":"48","hashOfConfig":"26"},{"size":2587,"mtime":1608662817272,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"l9bb45",{"filePath":"53","messages":"54","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"60"},"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/serviceWorker.js",[],["120","121"],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/DataSource.js",["122","123","124","125","126","127","128"],"\nimport URL from './URL'\nimport { v4 as uuidv4 } from 'uuid';\nimport jwt from 'jsonwebtoken'\n\nconst timeout = 500\n\nconst DataSource = {\n  baokimKey: null,\n  users: {},\n  getBaoKimKey: async (sessionId) => {\n    if (DataSource.baokimKey) {\n      return DataSource.baokimKey\n    }\n    const res = await fetch(URL.getBaokimKeyUrl(sessionId)).then(data => data.json())\n    DataSource.baokimKey = res.data\n    return DataSource.baokimKey\n    //return \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOiIyMDIwLTEyLTIxVDE1OjMxOjAwLjUxMFoiLCJpc3MiOiJUQmtla0l6eFkxeTBZeGp1YmhkSkkxbVZqR3FzMkNzUiIsImp0aSI6InhrYWtkZmtzZGZsYXNkIiwibmJmIjoxNjA4NTY3MTU5MzMyLCJleHAiOjE2MDg1NjcyMDkzMzIsImZvcm1fcGFyYW1zIjp7InRvX3VzZXIiOiJyb3lhbGRlYWQ5OEBnbWFpbC5jb20iLCJhbW91bnQiOiIyMDAwIiwiZGVzY3JpcHRpb24iOiJUZXN0IiwiZmVlX3BheWVyIjoiMiIsInR4bl9tb2RlIjoiMSJ9fQ.ZD7EdYSqBz1BvL5TU7avTVUIVc9S_5S2fTK0IKVQguM\"\n  },\n  getBaoKimCreateOrderUrl: (jwt) => {\n    return `https://api.baokim.vn/payment/api/v4/order/send?jwt=${jwt}`\n  },\n\n  getBaoKimTransferMoneyUrl: (jwt) => {\n    return `https://api.baokim.vn/payment/api/v4/transfer/create?jwt=${jwt}`\n  },\n\n  getBaoKimCheckOrderUrl: (jwt, orderId) => {\n    return `https://api.baokim.vn/payment/api/v4/order/detail?jwt=${jwt}&id=${orderId}`\n  },\n\n  createBaokimOrder: async (user, toUser, amount, message) => {\n    const form = new FormData()\n    const name = await DataSource.getUserFullname('', toUser.userId)\n    form.append(\"total_amount\", amount)\n    form.append(\"description\", `Transfer money from ${user.fullname} to ${name}`)\n    form.append(\"url_success\", document.location.href)\n    form.append(\"mrc_order_id\", uuidv4())\n    form.append(\"url_detail\", document.location.href)\n    form.append(\"lang\", \"vi\")\n    form.append(\"customer_email\", user.email)\n    //form.append(\"customer_phone\", user.email)\n    form.append(\"customer_name\", user.fullname)\n    const key = await DataSource.getBaoKimKey(user.sessionId)\n    const res = await fetch(DataSource.getBaoKimCreateOrderUrl(key), {\n      method: 'POST',\n      body: form,\n    }).then(data => data.json())\n    return res\n  },\n\n  loopWaitForPayment: async (order, user, toUser, amount, message, loopCnt) => {\n    //console.log('order')\n    //console.log(order)\n\n    if (loopCnt > 100) {\n      return\n    }\n\n    const key = await DataSource.getBaoKimKey(user.sessionId)\n    const res = await fetch(DataSource.getBaoKimCheckOrderUrl(key, order.order_id)).then(d => d.json())\n    console.log('status')\n    console.log(res)\n    if (res.code == 0 && res.data.stat == 'c') {\n      const tran = await DataSource.transferBaokimMoneyToUser(user, toUser, amount, message)\n      console.log('tran done:')\n      console.log(tran)\n      if (tran.code == 0) {\n        const m = await DataSource.createTransferBaokimMessage(user.sessionId, toUser.userId, amount, message)\n      }\n    } else {\n      setTimeout(() => { DataSource.loopWaitForPayment(order, user, toUser, amount, message, loopCnt + 1) }, timeout)\n    }\n  },\n\n  transferBaokimMoneyToUser: async (user, toUser, amount, message) => {\n    const toUserInfo = await DataSource.getUserInfo(toUser.userId)\n    const description = encodeURIComponent(`Transfer money from ${user.fullname} to ${toUserInfo.fullname}`)\n\n    let url = URL.getBaokimKeyUrl(user.sessionId)\n    url += \"&form_params=true\"\n    url += `&to_user=${toUserInfo.email}`\n    url += `&amount=${amount}`\n    url += `&description=${description}`\n\n    const key = await fetch(url).then(data => data.json()).then(json => json.data)\n\n    const form = new FormData()\n    form.append(\"to_user\", toUserInfo.email)\n    form.append(\"amount\", amount)\n    form.append(\"description\", description)\n\n    const res = await fetch(DataSource.getBaoKimTransferMoneyUrl(key), {\n      method: 'POST',\n      body: form,\n    }).then(data => data.json())\n    return res\n  },\n\n  transferBaokim: async (user, toUser, amount, message) => {\n    try {\n      const order = await DataSource.createBaokimOrder(user, toUser, amount, message)\n      console.log(order)\n      if (order.code == 0) {\n        window.open(order.data.payment_url)\n      }\n      setTimeout(() => { DataSource.loopWaitForPayment(order.data, user, toUser, amount, message, 0) }, timeout)\n      return order\n    } catch (err) {\n      console.log(err)\n      return {\n        code: 1,\n        message: err.message,\n      }\n    }\n\n  },\n\n  createWebSocket: (sessionId) => {\n    const ws = new WebSocket(URL.getWSURL(sessionId));\n\n    return ws\n  },\n  getUserFullname: async (sessionId, userId) => {\n    if (DataSource.users[userId]) {\n      return DataSource.users[userId].fullname\n    }\n    await DataSource.getUserInfo(userId).then(u => DataSource.users[u.id] = u)\n    return DataSource.users[userId].fullname\n    //return 'Somebody'\n  },\n  login: async (username, password) => {\n    const data = {\n      username: username,\n      password: password\n    }\n    const res = await fetch(URL.getLoginURL(),\n      {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }).then(data => data.json());\n    return res;\n  },\n\n  getChatList: async (sessionId) => {\n    const json = await fetch(URL.getChatListURL(sessionId)).then(data => data.json());\n    return json;\n  },\n\n  getFriendList: async (sessionId) => {\n    const json = await fetch(URL.getFriendListURL(sessionId)).then(data => data.json());\n    return json;\n  },\n\n  getMessageList: async (sessionId, channelId) => {\n    const json = await fetch(URL.getMessageListURL(sessionId, channelId)).then(data => data.json());\n    return json;\n  },\n\n  getUserAuthenInfo: async (sessionId) => {\n    const json = await fetch(URL.getAuthenURL(sessionId)).then(data => data.json());\n    return json;\n  },\n\n  getUserInfo: async (userId) => {\n    if (DataSource.users[userId]) {\n      return DataSource.users[userId]\n    }\n    const userInfo = await fetch(URL.getUserURL(userId)).then(data => data.json());\n    DataSource.users[userId] = userInfo.data\n    return userInfo.error != 0 ? null : userInfo.data;\n  },\n\n  getSessionIdFromUrl: () => {\n    return document.location.search.substr(11);\n  },\n\n  getMoneyInfo: async (sessionId) => {\n    const account = await fetch(URL.getMoneyInfoURL(sessionId)).then(data => data.json());\n    return account;\n  },\n\n  createGroup: async (sessionId, me, name, users) => {\n    const data = {\n      channel: {\n        name: name,\n        type: 'group',\n        members: [\n          { userId: me }\n        ].concat(users.map(u => ({ userId: u })))\n      }\n    }\n    const res = await fetch(URL.createNewChatURL(sessionId),\n      {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }).then(data => data.json());\n    return res\n  },\n\n  addFriend: async (sessionId, toUser) => {\n    const data = {\n      \"to\": toUser\n    };\n    const res = await fetch(URL.addFriendURL(sessionId),\n      {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }).then(data => data.json());\n    return res\n  },\n\n  removeFriend: async (sessionId, toUser) => {\n    const data = {\n      \"to\": toUser\n    };\n    const res = await fetch(URL.addFriendURL(sessionId),\n      {\n        method: 'DELETE',\n        body: JSON.stringify(data)\n      }).then(data => data.json());\n    return res\n  },\n\n\n  createNewChat: async (sessionId, me, them) => {\n    const data = {\n      channel: {\n        type: 'private',\n        members: [\n          { userId: me },\n          { userId: them }\n        ]\n      }\n    }\n    const res = await fetch(URL.createNewChatURL(sessionId),\n      {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }).then(data => data.json());\n    return res\n  },\n  createMoneyAccount: async (sessionId) => {\n    const res = await fetch(URL.createMoneyAccountURL(sessionId),\n      {\n        method: 'POST',\n      }).then(data => data.json());\n    return res\n  },\n\n  deposit: async (sessionId, amount) => {\n    const data = {\n      id: uuidv4(),\n      amount: amount\n    }\n    const res = await fetch(URL.getDepositMoneyURL(sessionId),\n      {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }).then(data => data.json());\n    return res\n  },\n  withdraw: async (sessionId, amount) => {\n    const data = {\n      id: uuidv4(),\n      amount: amount\n    }\n    const res = await fetch(URL.getWithdrawMoneyURL(sessionId),\n      {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }).then(data => data.json());\n    return res\n  },\n\n  transfer: async (sessionId, toUser, amount, message) => {\n    const data = {\n      id: uuidv4(),\n      toUser: toUser,\n      amount: amount,\n    }\n    if (message) data.message = message;\n    const res = await fetch(URL.getTransferMoneyURL(sessionId),\n      {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }).then(data => data.json());\n    return res\n  },\n\n  createTransferBaokimMessage: async (sessionId, toUser, amount, message) => {\n    const data = {\n      id: uuidv4(),\n      toUser: toUser,\n      amount: amount,\n    }\n    if (message) data.message = message;\n    const res = await fetch(URL.getTransferBaokimMoneyURL(sessionId),\n      {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }).then(data => data.json());\n    return res\n  },\n\n  history: async (sessionId, limit = 100, offset = 0) => {\n    const res = await\n      fetch(URL.getTransactionHistory(sessionId, limit, offset))\n        .then(data => data.json());\n    return res;\n  },\n\n  findUser: async (pattern) => {\n    let result = [\n      { \"id\": \"6715433118729375744\", \"username\": \"admin\", \"email\": \"admin@email.com\", \"fullname\": \"Admin\", \"sessionId\": \"\" },\n      { \"id\": \"6715433545218789376\", \"username\": \"giahuy\", \"email\": \"giahuyng98@gmail.com\", \"fullname\": \"Nguyễn Gia Huy\", \"sessionId\": \"\" },\n      { \"id\": \"6715434152134578176\", \"username\": \"alice\", \"email\": \"alice@email.com\", \"fullname\": \"Alice\", \"sessionId\": \"\" },\n      { \"id\": \"6715434239023779840\", \"username\": \"duc48\", \"email\": \"royaldead98@gmail.com\", \"fullname\": \"Võ Minh Đức\", \"sessionId\": \"\" },\n      { \"id\": \"6715434324872794112\", \"username\": \"charlie\", \"email\": \"charlie@email.com\", \"fullname\": \"Charlie\", \"sessionId\": \"\" },\n      { \"id\": \"6720216228796960768\", \"username\": \"frank\", \"email\": \"frank@email.com\", \"fullname\": \"Frank\", \"sessionId\": \"\" },\n    ]\n    return result\n    //for (const u in DataSource.users) {\n    //  result.push(DataSource.users[u])\n    //}\n    //return result\n    //return [{ username: 'duc', userId: \"6715434239023779840\" }]\n  },\n\n}\n\nexport default DataSource;\n",["129","130"],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/MoneyTab.js",["131","132","133","134","135","136","137","138"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {\n  Paper,\n  Typography,\n  Box,\n  Divider,\n  List,\n  ListItem,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  DialogActions,\n} from '@material-ui/core';\n\nimport TabPanel, { a11yProps } from './TabPanel'\n\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport {\n  selectTab,\n  selectUser,\n  notify,\n} from '../app/reducer'\n\nimport TransactionHistory from './TransactionHistory'\nimport DataSource from '../DataSource'\nimport { UserControl, BadgeAvatars, MoneyControl } from './Label'\n\nexport default function ConnectTab() {\n  const dispatch = useDispatch()\n  const tab = useSelector(selectTab);\n  const user = useSelector(selectUser)\n  const classes = useStyles();\n  const [transactionHistory, setTransactionHistory] = useState([]);\n  const [moneyInfo, setMoneyInfo] = useState({});\n  const [transaction, setTransaction] = useState({ open: false })\n\n  async function getMoneyInfo() {\n    const data = await DataSource.getMoneyInfo(user.sessionId);\n    setMoneyInfo(data.data);\n  }\n  async function getTransactionHistory() {\n    const data = await DataSource.history(user.sessionId);\n    setTransactionHistory(data.data || []);\n  };\n  useEffect(() => {\n    getMoneyInfo();\n  }, [user]);\n\n\n  useEffect(() => {\n    getTransactionHistory();\n  }, [user]);\n\n  const handleCreateAccount = async () => {\n    try {\n      const res = await DataSource.createMoneyAccount(user.sessionId)\n      if (!res.error) {\n        dispatch(notify({ open: true, severity: 'success', message: 'Done' }))\n        getMoneyInfo()\n        getTransactionHistory()\n      } else {\n        dispatch(notify({ open: true, severity: 'error', message: res.message }))\n      }\n    } catch (err) {\n      dispatch(notify({ open: true, severity: 'error', message: err.message }))\n    }\n  }\n\n  const handleTransaction = async () => {\n    let res\n    switch (transaction.type) {\n      case 'deposit':\n        res = await DataSource.deposit(user.sessionId, transaction.amount);\n        break;\n      case 'withdraw':\n        res = await DataSource.withdraw(user.sessionId, transaction.amount);\n        break;\n      case 'transfer':\n        res = await DataSource.transfer(user.sessionId, transaction.toUser, transaction.amount, transaction.message);\n        break;\n      default:\n        console.log(\"can't go here\")\n        return;\n    }\n    if (res == null || res.error) {\n      const message = res ? res.message : 'unknow';\n      dispatch(notify({ open: true, severity: 'error', message: message }))\n    } else {\n      getMoneyInfo();\n      getTransactionHistory();\n      dispatch(notify({ open: true, severity: 'success', message: 'Done' }))\n    }\n    handleCloseTransaction();\n  }\n\n  const handleCloseTransaction = () => {\n    setTransaction({ open: false })\n  }\n\n  return (\n    <TabPanel value={tab.index} index={2} className={classes.root}>\n      <Box p={1}>\n        <Paper>\n          {moneyInfo &&\n            <MoneyControl alt='username' src='user.ico' {...user} {...moneyInfo} />\n          }\n          <Divider />\n          <Box p={1} >\n            <List className={classes.clist}>\n              {moneyInfo &&\n                <>\n                  <ListItem>\n\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={classes.button}\n                      startIcon={<AddCircleIcon />}\n                      onClick={() => setTransaction({ open: true, type: 'deposit' })}\n                    >Deposit</Button>\n                  </ListItem>\n\n                  <ListItem>\n                    <Button\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      className={classes.button}\n                      startIcon={<RemoveIcon />}\n                      onClick={() => setTransaction({ open: true, type: 'withdraw' })}\n                    >Withdraw</Button>\n                  </ListItem>\n                </>\n              }\n\n              {!moneyInfo &&\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  startIcon={<CreditCardIcon />}\n                  onClick={handleCreateAccount}\n                >Create Account</Button>\n              }\n\n            </List>\n\n          </Box>\n\n        </Paper>\n      </Box>\n      {moneyInfo &&\n        <TransactionHistory dataSource={transactionHistory} />\n      }\n      <Dialog\n        open={transaction.open}\n        onClose={handleCloseTransaction}\n        aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">\n          {`Transaction ${transaction.type}`}\n        </DialogTitle>\n        <DialogContent>\n          {transaction.type == 'transfer' &&\n            <React.Fragment>\n              <TextField\n                onChange={(evt) => setTransaction(\n                  tran => ({ ...tran, message: evt.target.value }))}\n                autoFocus\n                margin=\"dense\"\n                id=\"message\"\n                label=\"Messagge:\"\n                fullWidth\n              />\n            </React.Fragment>\n          }\n\n          <TextField\n            onChange={(evt) => setTransaction(\n              tran => ({ ...tran, amount: evt.target.value }))}\n            autoFocus\n            margin=\"dense\"\n            id=\"amount\"\n            label=\"Amount:\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleTransaction} color=\"primary\">\n            OK\n          </Button>\n          <Button onClick={handleCloseTransaction} color=\"secondary\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n    </TabPanel>\n  )\n}\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    overflow: 'hidden',\n    //maxHeight: '300px',\n    //height: '100%',\n  },\n  three: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    overlow: 'hidden',\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    overlow: 'hidden',\n  },\n  list: {\n    overflowY: 'auto',\n  },\n  clist: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  clistspace: {\n    //padding: theme.spacing(3),\n  },\n\n}))\n\n\n",["139","140"],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/ChatTab.js",["141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {\n  Paper,\n  Typography,\n  Box,\n  List,\n  Divider,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  ListSubheader,\n  ListItemSecondaryAction,\n  Avatar,\n  Button,\n  Badge,\n} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\n\nimport { UserControl, BadgeAvatars } from './Label'\nimport UserSearchDialog from './UserSearchDialog'\nimport TabPanel, { a11yProps } from './TabPanel'\n\nimport {\n  selectTab,\n  selectChatList,\n  changeChatList,\n  selectCurrentChannel,\n  changeCurrentChannel,\n  selectUser,\n  changeUser,\n  selectTyping,\n  notify,\n  selectNotify,\n} from '../app/reducer'\n\n//import DataSource from '../FakeDataSource'\nimport DataSource from '../DataSource'\nimport URL from '../URL'\nimport { blue } from '@material-ui/core/colors';\n\nconst msg = require('../payload_pb');\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    overflow: 'hidden',\n    //height: '100%',\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    overlow: 'hidden',\n  },\n  list: {\n    overflowY: 'auto',\n  },\n  clist: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n\n}))\n\nconst BlueTypography = withStyles({\n  root: {\n    color: blue[500],\n  }\n})(Typography)\n\n\nexport default function ChatTab(props) {\n  const classes = useStyles();\n  const tab = useSelector(selectTab);\n  const currentChannel = useSelector(selectCurrentChannel);\n  const user = useSelector(selectUser);\n  const chatList = useSelector(selectChatList);\n  const dispatch = useDispatch();\n  const typing = useSelector(selectTyping)\n\n  const [openNewChat, setOpenNewChat] = useState(false);\n\n  const handleClickOpenNewChat = () => {\n    setOpenNewChat(true);\n  }\n\n  const handleCloseNewChat = () => {\n    setOpenNewChat(false);\n  }\n\n  const handleCreateNewChat = async (data) => {\n    console.log(data);\n    try {\n      const res = await DataSource.createNewChat(user.sessionId, user.id, data.id);\n      if (!res.error) {\n        // TODO: reload chatlist\n        dispatch(notify({ open: true, severity: 'success', message: res.message }))\n      } else {\n        dispatch(notify({ open: true, severity: 'error', message: res.message }))\n      }\n    } catch (err) {\n      dispatch(notify({ open: true, severity: 'error', message: err.message }))\n    }\n    handleCloseNewChat();\n  }\n  return (\n    <TabPanel value={tab.index} index={0} className={classes.root}>\n      <Box p={1}>\n        <Paper>\n          <UserControl alt='username' src='user.ico' />\n          <Divider />\n          <Box p={1}>\n            <List className={classes.clist}>\n              <ListItem>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  startIcon={<AddIcon />}\n                  onClick={handleClickOpenNewChat}\n                >New Chat</Button>\n              </ListItem>\n            </List>\n\n          </Box>\n          <UserSearchDialog\n            open={openNewChat}\n            title=\"New chat\"\n            onClick={handleCreateNewChat}\n            onClose={handleCloseNewChat}\n          />\n        </Paper>\n      </Box>\n\n      <List\n        className={classes.list}\n      >\n        <ListSubheader disableSticky={true}>\n          Chat list\n        </ListSubheader>\n        {chatList.map((chatItem, index) => {\n          const showTyping = (typing && typing.showOnChatItem && chatItem.channel.id == typing.data.channelId)\n\n          return (\n            <ChatItem\n              selected={currentChannel && currentChannel.id == chatItem.channel.id}\n              onClick={() => {\n                dispatch(changeCurrentChannel(chatItem.channel));\n              }}\n              typing={showTyping ? typing.message : null}\n              {...chatItem}\n            />\n          )\n        })}\n      </List>\n    </TabPanel >\n  )\n}\nfunction getMessageType(type) {\n  switch (type) {\n    case \"TEXT\":\n    case \"text\":\n    case msg.ChatContent.ChatContentType.TEXT:\n      return \"text\"\n    case \"MONEY\":\n    case \"money\":\n    case msg.ChatContent.ChatContentType.MONEY:\n      return \"money\"\n  }\n  return \"\"\n}\n\nfunction getMoneyContent(str) {\n  const arr = str.split(',')\n  if (arr[0] == 'baokim') {\n    let res = [arr[0], arr[1]]\n    let str = ''\n    for (let i = 2; i < arr.length; ++i) {\n      str += arr[i]\n    }\n    res.push(str)\n    return res\n  } else {\n    arr.unshift(\"quickchat\")\n    let res = [arr[0], arr[1]]\n    let str = ''\n    for (let i = 2; i < arr.length; ++i) {\n      str += arr[i]\n    }\n    res.push(str)\n    return res\n  }\n}\n\nfunction ChatItemText(props) {\n  const [name, setName] = useState(null)\n  useEffect(() => {\n    async function getUserFullname() {\n      const res = await DataSource.getUserFullname(props.user.sessionId, props.lastMessage.userId)\n      setName(res)\n    }\n    getUserFullname()\n  }, [props.user])\n\n  if (!props.lastMessage || !props.lastMessage.content) {\n    return (<></>)\n  }\n\n  if (props.lastMessage && getMessageType(props.lastMessage.content.type) == \"money\") {\n    const [type, amount, message] = getMoneyContent(props.lastMessage.content.content)\n    return (\n      <Typography\n        component=\"span\"\n        variant=\"body2\"\n        color=\"textPrimary\"\n      >\n        <b>VND {amount} </b>: message\n      </Typography>\n    )\n  }\n\n  const msg = props.lastMessage.userId == props.user.id ?\n    (\n      <Typography\n        component=\"span\"\n        variant=\"body2\"\n        color=\"textPrimary\"\n      >\n        <b><i>You</i></b>: {props.lastMessage.content.content}\n      </Typography>\n    ) :\n    (\n      <Typography\n        component=\"span\"\n        variant=\"body2\"\n        color=\"textPrimary\"\n      >\n        {props.channel.type == \"group\" ? (<b><i>{name}: </i></b>) : ''}\n        {props.lastMessage && props.lastMessage.content && props.lastMessage.content.content}\n      </Typography>\n    )\n  return msg\n}\n\nfunction ChatItem(props) {\n\n  const handleClick = (evt) => {\n    props.onClick(props)\n  }\n  const user = useSelector(selectUser);\n  return (\n    <>\n      <ListItem\n        selected={props.selected}\n        button onClick={handleClick}>\n\n        <ListItemAvatar>\n          {props.channel.type == \"private\" ?\n            <BadgeAvatars\n              src={props.src ?? 'user.ico'}\n            />\n            : <Avatar src={props.src ?? 'group.svg'} />\n          }\n\n        </ListItemAvatar>\n\n        <Divider />\n\n        <ListItemText\n          primary={props.channel.name}\n          secondary={\n            <>\n              {props.typing ?\n                <BlueTypography\n                  component=\"span\"\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                >\n                  <Box fontStyle=\"italic\">{props.typing}</Box>\n                </BlueTypography> :\n                <ChatItemText {...props} user={user} />\n              }\n            </>\n          }\n        />\n        {\n          (props.lastMessage.unread > 0) &&\n          <ListItemSecondaryAction>\n            <Badge badgeContent={props.lastMessage.unread} color=\"error\" />\n          </ListItemSecondaryAction>\n        }\n      </ListItem>\n      <Divider />\n    </>\n  )\n}\n\n\n",["158","159"],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/URL.js",["160"],"\nexport default URL = {\n  WS: 'ws://localhost:9001',\n  GATE_WAY: 'http://localhost:3010/api/v1',\n  WEB: 'http://localhost:3000',\n\n  getChatURL: (sessionId) => {\n    console.log('called')\n    return `${URL.WEB}?sessionId=${sessionId}`;\n  },\n\n  getLoginURL: () => {\n    return `${URL.GATE_WAY}/users/login`;\n  },\n\n  getWSURL: (sessionId) => {\n    return `${URL.WS}?sessionId=${sessionId}`;\n  },\n\n  getAuthenURL: (sessionId) => {\n    return `${URL.GATE_WAY}/users?sessionId=${sessionId}`;\n  },\n\n  getChatListURL: (sessionId) => {\n    return `${URL.GATE_WAY}/chat-list?sessionId=${sessionId}`;\n  },\n\n  getMessageListURL: (sessionId, channelId) => {\n    return `${URL.GATE_WAY}/channels/${channelId}/messages?sessionId=${sessionId}`;\n  },\n\n  getUserURL: (userId) => {\n    return `${URL.GATE_WAY}/users/${userId}`;\n  },\n\n  createNewChatURL: (sessionId) => {\n    return `${URL.GATE_WAY}/channels?sessionId=${sessionId}`;\n  },\n\n  getMoneyInfoURL: (sessionId) => {\n    return `${URL.GATE_WAY}/money?sessionId=${sessionId}`;\n  },\n  createMoneyAccountURL: (sessionId) => {\n    return `${URL.GATE_WAY}/money?sessionId=${sessionId}`;\n  },\n\n  getDepositMoneyURL: (sessionId) => {\n    return `${URL.GATE_WAY}/money/deposit?sessionId=${sessionId}`;\n  },\n  getWithdrawMoneyURL: (sessionId) => {\n    return `${URL.GATE_WAY}/money/withdraw?sessionId=${sessionId}`;\n  },\n  getTransferMoneyURL: (sessionId) => {\n    return `${URL.GATE_WAY}/money/transfer?sessionId=${sessionId}`;\n  },\n  getTransferBaokimMoneyURL: (sessionId) => {\n    return `${URL.GATE_WAY}/money/transfer-baokim?sessionId=${sessionId}`;\n  },\n\n  getTransactionHistory: (sessionId, limit, offset) => {\n    return `${URL.GATE_WAY}/money/history?sessionId=${sessionId}&limit=${limit}&offset=${offset}`;\n  },\n\n  getBaokimKeyUrl: (sessionId) => {\n    return `${URL.GATE_WAY}/money/baokim/token?sessionId=${sessionId}`;\n  },\n\n  addFriendURL: (sessionId) => {\n    return `${URL.GATE_WAY}/friends?sessionId=${sessionId}`;\n  },\n  getFriendListURL: (sessionId) => {\n    return `${URL.GATE_WAY}/friends?sessionId=${sessionId}`;\n  },\n\n}\n",["161","162"],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/FakeDataSource.js",[],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/UserSearchDialog.js",["163","164","165","166","167","168","169","170","171"],"import React, { useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport TextField from '@material-ui/core/TextField';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Box from '@material-ui/core/Box';\nimport PersonIcon from '@material-ui/icons/Person';\nimport Search from './Search';\nimport Datasource from '../DataSource';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CommentIcon from '@material-ui/icons/Comment';\n\nfunction Item(props) {\n  return (\n    <>\n      <ListItem button\n        onClick={props.onClick}\n      >\n        <ListItemIcon>\n          <PersonIcon />\n        </ListItemIcon>\n        <ListItemText>\n          {props.fullname} ({props.username})\n                  </ListItemText>\n        {/*\n                  <ListItemSecondaryAction>\n                    <IconButton edge=\"end\" aria-label=\"comments\">\n                      <CommentIcon />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                */}\n      </ListItem>\n      <Divider />\n    </>\n  )\n}\n\nexport default function UserSearchDialog(props) {\n\n  const [users, setUsers] = useState([])\n\n  const handleChange = async (e) => {\n    setUsers(await Datasource.findUser(e.target.value))\n  }\n\n  return (\n    <Dialog open={props.open}\n      onClose={props.onClose}\n      aria-labelledby=\"form-dialog-title\"\n      fullWidth={true}\n    >\n      <DialogTitle id=\"form-dialog-title\">\n        {props.title}\n      </DialogTitle>\n      <DialogContent>\n        <Search\n          placeholder=\"Type username or email\"\n          onChange={handleChange}\n        />\n        <Divider />\n        <List>\n          {users.map(u => <Item {...u} onClick={() => props.onClick(u)} />)}\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          onClick={props.onClose}\n          color=\"secondary\"\n        >\n          Cancel\n        </Button>\n\n      </DialogActions>\n    </Dialog >\n  )\n}\n\nexport function GroupDialog(props) {\n  const [users, setUsers] = useState([])\n  const [selected, setSeletected] = useState([])\n  const [name, setName] = useState()\n\n  const handleChange = async (e) => {\n    let res = await Datasource.findUser(e.target.value)\n    res = res.filter(u => {\n      for (const s of selected) {\n        if (u.id == s.id) return false\n      }\n      return true\n    })\n    setUsers(res)\n  }\n\n  return (\n    <Dialog open={props.open}\n      onClose={props.onClose}\n      aria-labelledby=\"form-dialog-title\"\n      fullWidth={true}\n    >\n      <DialogTitle id=\"form-dialog-title\">\n        {props.title}\n      </DialogTitle>\n      <DialogContent>\n        <TextField\n          onChange={(evt) => setName(evt.target.value)}\n          value={name}\n          autoFocus\n          margin=\"dense\"\n          id=\"name\"\n          label=\"Group name:\"\n          fullWidth\n        />\n        <Divider />\n        <Box>\n          <List>\n            <Search\n              placeholder=\"Type username or email\"\n              onChange={handleChange}\n            />\n            <Divider />\n            <List>\n              <ListSubheader>\n                Members\n              </ListSubheader>\n              {selected.map(u => <Item {...u} onClick={() => {\n                setSeletected(s => s.filter(uu => uu.id != u.id))\n              }} />)}\n            </List>\n\n            <List>\n              <ListSubheader>\n                Users\n              </ListSubheader>\n              {users.map(u => <Item {...u} onClick={() => {\n                setSeletected(s => ([...s, u]))\n                setUsers(users.filter(uu => uu.id != u.id))\n              }} />)}\n            </List>\n          </List>\n        </Box>\n\n        <Divider />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          onClick={() => props.onClick(name, selected.map(u => u.id))}\n          color=\"primary\"\n        >\n          Create\n        </Button>\n\n        <Button\n          variant=\"contained\"\n          onClick={props.onClose}\n          color=\"secondary\"\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog >\n  )\n}\n","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/Search.js",["172","173"],"import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    // [theme.breakpoints.up('sm')]: {\n    //   width: '12ch',\n    //   '&:focus': {\n    //     width: '20ch',\n    //   },\n    // },\n  },\n}));\n\nexport default function Search(props) {\n  const classes = useStyles();\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <SearchIcon />\n      </div>\n      <InputBase\n        placeholder={props.placeholder || 'Search...'}\n        fullWidth={true}\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        }}\n        inputProps={{ 'aria-label': 'search' }}\n        onChange={props.onChange}\n      />\n    </div>\n  )\n}\n",["174","175"],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/history_pb.js",[],["176","177"],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/app/reducer.js",["178","179","180","181","182","183","184","185","186"],"import { createSlice } from '@reduxjs/toolkit';\n\nimport DataSource from '../FakeDataSource'\nimport WS from '../WebSocket'\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    tab: {\n      index: 0,\n      //name : ['Chat', 'Connect', 'Money'],\n    },\n    snackbar: {\n      open: false,\n      severity: 'success',\n      message: 'hi there',\n    },\n    user: {\n      id: 0,\n      username: 'giahuy',\n      fullname: 'Nguyen Gia Huy',\n      sessionId: null,\n      status: \"offline\",\n    },\n    ws: {},\n    typing: {\n      show: false,\n      showOnChatItem: false,\n      last: Date.now(),\n    },\n    chatList: [],\n    messageList: [],\n    currentChannel: null,\n    refs: {\n      scrollableListRef: null,\n    },\n  },\n  reducers: {\n    notify: (state, action) => {\n      if (action.payload.open == true) {\n        state.snackbar = action.payload;\n      } else {\n        state.snackbar.open = false;\n      }\n    },\n    changeTab: (state, action) => {\n      state.tab.index = action.payload.index;\n    },\n    changeChatList: (state, action) => {\n      state.chatList = action.payload;\n    },\n    addChatListMessage: (state, action) => {\n      const idx = state.chatList.findIndex(\n        (v) => v.channel.id == action.payload.channelId)\n      if (idx != -1) {\n        // TODO: move\n        let msg = { ...action.payload }\n\n        if (action.payload.userId == state.user.id) {\n          msg.unread = 0;\n        } else {\n          msg.unread = (state.chatList[idx].lastMessage.unread || 0) + 1\n        }\n        state.chatList[idx].lastMessage = msg\n      }\n    },\n    changeMessageList: (state, action) => {\n      state.messageList = action.payload;\n    },\n    addMessageList: (state, action) => {\n      if (state.currentChannel &&\n        action.payload.channelId == state.currentChannel.id) {\n        state.messageList.push(action.payload);\n\n        if (state.typing && state.typing.cancel) {\n          clearTimeout(state.typing.cancel)\n        }\n        state.typing = null;\n        //changeTyping(selectTyping(null))\n      }\n    },\n    changeCurrentChannel: (state, action) => {\n      const idx = state.chatList.findIndex(\n        (v) => v.channel.id == action.payload.id)\n      if (idx != -1) {\n        state.chatList[idx].lastMessage = { ...state.chatList[idx].lastMessage, unread: 0 }\n        //console.log(state.chatList[idx].lastMessage )\n      }\n      state.currentChannel = action.payload;\n    },\n    changeUser: (state, action) => {\n      state.user = action.payload;\n      state.user.status = \"online\"\n    },\n    changeWs: (state, action) => {\n      state.ws = action.payload;\n    },\n    changeTyping: (state, action) => {\n      // TODO check created time\n\n      if (state.typing && state.typing.cancel) {\n        clearTimeout(state.typing.cancel)\n      }\n      if (!action.payload.show) {\n        state.typing = null;\n      } else {\n        state.typing = action.payload;\n        state.typing.show = state.currentChannel &&\n          action.payload.data &&\n          state.currentChannel.id == action.payload.data.channelId\n      }\n    },\n    changeStatus: (state, action) => {\n      state.user.status = action.payload\n      WS.changeStatus(action.payload);\n    },\n  },\n});\n\nexport const {\n  notify,\n  changeTab,\n  changeChatList,\n  changeMessageList,\n  addMessageList,\n  addChatListMessage,\n  changeCurrentChannel,\n  changeUser,\n  changeWs,\n  changeTyping,\n  changeStatus,\n} = appSlice.actions;\n\nexport const selectNotify = state => state.app.snackbar;\nexport const selectTab = state => state.app.tab;\nexport const selectChatList = state => state.app.chatList;\nexport const selectMessageList = state => state.app.messageList;\nexport const selectCurrentChannel = state => state.app.currentChannel;\nexport const selectUser = state => state.app.user;\nexport const selectWs = state => state.app.ws;\nexport const selectTyping = state => state.app.typing;\n\nexport default appSlice.reducer;\n","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/UploadButtons.js",["187"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: 'none',\n  },\n}));\n\nexport default function UploadButtons() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <input\n        accept=\"image/*\"\n        className={classes.input}\n        id=\"contained-button-file\"\n        multiple\n        type=\"file\"\n      />\n\n      <input\n        accept=\"image/*\"\n        className={classes.input}\n        id=\"icon-button-file\"\n        type=\"file\" />\n      <label htmlFor=\"icon-button-file\">\n        <IconButton\n          color=\"primary\"\n          aria-label=\"upload picture\"\n          component=\"span\"\n        >\n          <PhotoCamera fontSize=\"default\" />\n        </IconButton>\n      </label>\n    </div>\n  );\n}\n","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/internal_message_pb.js",[],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/app/store.js",[],["188","189"],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/Label.js",["190","191","192","193","194","195","196","197"],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/chat_content_pb.js",[],["198","199"],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/index.js",[],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/TabPanel.js",["200","201","202","203","204","205"],"import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  Paper,\n  Typography,\n  Box,\n} from '@material-ui/core';\n\nexport function a11yProps(index) {\n  return {\n    id: `tabpanel-${index}`,\n    'aria-controls': `tabpanel-${index}`,\n  };\n}\n\nexport default function TabPanel(props) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`tabpanel-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <>\n          {children}\n        </>\n      )}\n    </div>\n  );\n}\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\n","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/WebSocket.js",[],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/payload_pb.js",[],["206","207"],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/ConnectTab.js",["208","209","210","211","212","213","214","215","216"],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/App.js",["217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport logo from './logo.svg';\r\n\r\nimport {\r\n  Button,\r\n  CssBaseline,\r\n  Snackbar,\r\n  Input,\r\n  Drawer,\r\n  AppBar,\r\n  Paper,\r\n  Tabs,\r\n  Tab,\r\n  Box,\r\n  Typography,\r\n} from '@material-ui/core';\r\n\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\r\n\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport PersonPinIcon from '@material-ui/icons/PersonPin';\r\n\r\nimport { createMuiTheme, ThemeProvider, makeStyles } from '@material-ui/core/styles';\r\nimport { green, orange } from '@material-ui/core/colors';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nimport { a11yProps } from './components/TabPanel'\r\nimport ChatTab from './components/ChatTab'\r\nimport ConnectTab from './components/ConnectTab'\r\nimport MoneyTab from './components/MoneyTab'\r\nimport MessageControl from './components/MessageControl'\r\nimport SignIn from './components/SignIn'\r\nimport URL from './URL'\r\n\r\nimport {\r\n  notify,\r\n  changeTab,\r\n  selectNotify,\r\n  selectTab,\r\n  selectChatList,\r\n  changeChatList,\r\n  selectUser,\r\n  changeUser,\r\n  changeWs,\r\n  selectWs,\r\n} from './app/reducer'\r\n\r\nimport DataSource from './DataSource'\r\nimport FakeDataSource from './FakeDataSource'\r\nimport WS from './WebSocket'\r\n\r\nimport './App.css';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    secondary: {\r\n      main: orange[500],\r\n    },\r\n  },\r\n});\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    height: '100vh',\r\n  },\r\n  tabs: {\r\n    height: '100%',\r\n  },\r\n  left: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    maxWidth: '480px',\r\n    height: '100%',\r\n  },\r\n  leftContent: {\r\n\r\n  },\r\n  center: {\r\n    display: 'flex 1 1',\r\n    flexDirection: 'column',\r\n    height: '100%',\r\n    overflow: 'hidden',\r\n    flexGrow: 5,\r\n  },\r\n  right: {\r\n\r\n  },\r\n\r\n}));\r\n\r\n\r\nexport default function App() {\r\n  const user = useSelector(selectUser);\r\n  const sessionId = DataSource.getSessionIdFromUrl()\r\n  if (sessionId && sessionId.length > 0) {\r\n    return <Main />\r\n  }\r\n  return <SignIn />\r\n}\r\n\r\nfunction Main() {\r\n  const dispatch = useDispatch();\r\n  const snackbar = useSelector(selectNotify);\r\n  const tab = useSelector(selectTab);\r\n  const classes = useStyles();\r\n  const messageListRef = React.createRef();\r\n  const user = useSelector(selectUser);\r\n  const ws = useSelector(selectWs);\r\n  const handleCloseSnackBar = () => {\r\n    dispatch(notify({ open: false }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function getUser() {\r\n      const data = await DataSource.getUserAuthenInfo(DataSource.getSessionIdFromUrl()).then(res => res.data)\r\n      dispatch(changeUser(data))\r\n    }\r\n    getUser();\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    async function getChatList() {\r\n      if (!user.sessionId) return\r\n      const data = await DataSource.getChatList(user.sessionId).then(res => res.data)\r\n      dispatch(changeChatList(data))\r\n    }\r\n    getChatList();\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (!user.sessionId) return\r\n    WS.instance = DataSource.createWebSocket(user.sessionId)\r\n    //dispatch(notify({ open: true, severity: 'success', message: 'websocket is opened' }))\r\n\r\n    dispatch(changeWs({ open: true }))\r\n  }, [user]);\r\n\r\n  return (\r\n    <ThemeProvider\r\n    //theme={theme}\r\n    >\r\n      <div className={classes.root}>\r\n        <CssBaseline />\r\n        <Snackbar\r\n          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n          open={snackbar.open}\r\n          onClose={handleCloseSnackBar}\r\n          autoHideDuration={10000}\r\n        >\r\n          <Alert onClose={handleCloseSnackBar} severity={snackbar.severity}>\r\n            {snackbar.message}\r\n          </Alert>\r\n        </Snackbar>\r\n\r\n        <div className={classes.left}>\r\n          <AppBar position=\"static\" color=\"default\">\r\n            <Tabs\r\n              value={tab.index}\r\n              onChange={(evt, value) => { dispatch(changeTab({ index: value })) }}\r\n              variant=\"fullWidth\"\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              className={classes.tabs}\r\n            >\r\n              <Tab icon={<ChatIcon />} label=\"Chat\" {...a11yProps(0)} />\r\n              <Tab icon={<PeopleIcon />} label=\"Connect\" {...a11yProps(1)} />\r\n              <Tab icon={<MonetizationOnIcon />} label=\"Money\" {...a11yProps(2)} />\r\n            </Tabs>\r\n          </AppBar>\r\n          <ChatTab messageListRef={messageListRef} />\r\n          <ConnectTab />\r\n          <MoneyTab />\r\n        </div>\r\n\r\n        <div className={classes.center}>\r\n          <MessageControl messageListRef={messageListRef} />\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\n","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/MessageControl.js",["238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport throttle from 'lodash/throttle';\nimport TransferWithinAStationIcon from '@material-ui/icons/TransferWithinAStation';\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\nimport Fab from '@material-ui/core/Fab';\nimport {\n  Paper,\n  Typography,\n  AppBar,\n  Toolbar,\n  List,\n  ListItem,\n  OutlinedInput,\n  IconButton,\n  ListItemText,\n  ListItemAvatar,\n  Chip,\n  Box,\n  Badge,\n  Card,\n  CardActions,\n  CardContent,\n  Avatar,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  Button,\n} from '@material-ui/core';\n\n//import Picker from 'emoji-picker-react';\nimport Emoji from \"react-emoji-render\";\nimport 'emoji-mart/css/emoji-mart.css'\nimport { Picker } from 'emoji-mart'\nimport MuiAlert from '@material-ui/lab/Alert';\nimport SendIcon from '@material-ui/icons/Send';\nimport UploadButtons from './UploadButtons'\n\nimport PeopleIcon from '@material-ui/icons/People';\nimport PersonIcon from '@material-ui/icons/Person';\nimport { makeStyles } from '@material-ui/core/styles';\n//import DataSource from '../FakeDataSource'\nimport DataSource from '../DataSource'\n\nimport { Timestamp } from 'google-protobuf/google/protobuf/timestamp_pb';\nimport {\n  selectMessageList,\n  selectCurrentChannel,\n  changeMessageList,\n  addMessageList,\n  selectUser,\n  selectWs,\n  changeWs,\n  selectTyping,\n  changeTyping,\n  selectChatList,\n  changeChatList,\n  selectNotify,\n  notify,\n  addChatListMessage,\n} from '../app/reducer'\n\nimport {\n  ChannelControl,\n} from './Label'\n\nimport WS from '../WebSocket'\n\nconst msg = require('../payload_pb');\n\nconst inputHeight = 80;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    height: '100%',\n    flexDirection: 'column',\n  },\n  list: {\n    display: 'flex',\n    flexGrow: 1,\n    flexDirection: 'column',\n    overflowY: 'auto',\n  },\n  appBar: {\n    maxHeight: '100px',\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '300px',\n    overlow: 'hidden',\n    flexGrow: 1,\n  },\n  input: {\n    marginTop: 'auto',\n    marginBottom: 0,\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n  },\n  message: {\n    display: 'flex',\n    //flexGrow: 1,\n    flexDirection: 'row',\n  },\n  myMessage: {\n    justifyContent: 'flex-end',\n  },\n  theirMessage: {\n    justifyContent: 'flex-start',\n  },\n  seens: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  timestamp: {\n    justifyContent: 'center',\n    color: '#999',\n    fontWeight: 600,\n    fontSize: 12,\n    textTransform: 'uppercase',\n  },\n  textMessage: {\n    fontSize: 15,\n  }\n}));\n\nfunction Seen(props) {\n  const classes = useStyles()\n  //TODO: fix\n  return (<></>)\n  return (\n    <Box >\n      <Badge\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n      >\n        {props.seens.map(s => (<PeopleIcon fontSize=\"small\" />))}\n      </Badge>\n    </Box>\n  )\n}\n\nfunction formatDate(date) {\n  return `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`\n}\n\nfunction toDate(input) {\n  if (typeof input == \"string\") {\n    return new Date(Date.parse(input));\n  } else if (typeof input == \"object\") {\n    return input;\n  } else {\n    return new Date()\n  }\n}\n\nfunction formatFullDate(input) {\n  if (typeof input == \"string\") {\n    const date = new Date(Date.parse(input));\n    return formatDate(date)\n    //return date.toLocaleString();\n  } else if (typeof input == \"object\") {\n    return formatDate(input)\n    //return input.toLocaleString()\n  } else {\n    return \"NULL\"\n  }\n}\n\nfunction TextMessage(props) {\n  const user = useSelector(selectUser)\n  const currentChannel = useSelector(selectCurrentChannel)\n  const handleClick = (data) => {\n    console.log(data)\n  }\n\n  const [groupData, setGroupData] = useState()\n  const classes = useStyles()\n\n  useEffect(() => {\n    async function get() {\n      const name = await DataSource.getUserFullname(user.sessionId, props.userId)\n      setGroupData({ userFullName: name })\n    }\n    if (currentChannel.type == \"group\" && user.id != props.userId) {\n      get()\n    }\n  }, [props.messageId])\n\n  let timeComponent = formatFullDate(props.createAt)\n\n  if (props.previous) {\n    const previousTime = toDate(props.previous.createAt)\n    const thisTime = toDate(props.createAt)\n\n    if (previousTime.toDateString() === thisTime.toDateString()) {\n      // 60s\n      if ((thisTime - previousTime) / 1000 > 60) {\n        timeComponent = `${thisTime.getHours()}:${thisTime.getMinutes()}`\n      } else {\n        timeComponent = null\n      }\n    }\n  }\n\n  return (\n    <>\n      {timeComponent &&\n        <ListItem className={classes.timestamp} key={`D${props.messageId}`}>\n          {timeComponent}\n        </ListItem>\n      }\n      <ListItem\n        className={props.userId == user.id ?\n          classes.myMessage :\n          classes.theirMessage\n        }\n        //autoFocus={true}\n        key={props.messageId}\n      >\n        <span className={classes.message}>\n          {\n            groupData &&\n            <Chip\n              variant=\"outlined\"\n              label={\n                <Box fontSize={18}>\n                  {groupData.userFullName}:\n              </Box>\n              }\n            />\n\n          }\n          <Chip\n            label={\n              <Box fontSize={18}>\n                <Emoji text={props.content.content} />\n              </Box>\n            }\n            onClick={handleClick}\n            color={props.userId == user.id ? \"primary\" : \"default\"}\n          />\n          <Seen {...props} />\n        </span>\n      </ListItem>\n    </>\n  )\n}\n\n// TODO: use function\nfunction getMoneyContent(str) {\n  const arr = str.split(',')\n  if (arr[0] == 'baokim') {\n    let res = [arr[0], arr[1]]\n    let str = ''\n    for (let i = 2; i < arr.length; ++i) {\n      str += arr[i]\n    }\n    res.push(str)\n    return res\n  } else {\n    arr.unshift(\"quickchat\")\n    let res = [arr[0], arr[1]]\n    let str = ''\n    for (let i = 2; i < arr.length; ++i) {\n      str += arr[i]\n    }\n    res.push(str)\n    return res\n  }\n}\nfunction getMoneyType(props) {\n\n}\n\nfunction Money(props) {\n  const [type, amount, message] = getMoneyContent(props.content.content)\n  return (\n    <Card >\n      <CardContent >\n        <Typography color=\"textSecondary\" gutterBottom>\n          {`Transfer Money ${type}`}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {`${props.what}${amount} VND`}\n        </Typography>\n        <Typography color=\"textSecondary\">\n          {message}\n        </Typography>\n\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction MoneyMessage(props) {\n  const user = useSelector(selectUser)\n  const what = props.userId == user.id ? \"-\" : \"+\";\n  const handleClick = (data) => {\n    console.log(data)\n  }\n  const classes = useStyles()\n  return (\n    <>\n      <ListItem className={classes.timestamp} key={`D${props.messageId}`}>\n        {formatFullDate(props.createAt)}\n      </ListItem>\n      <ListItem\n        className={props.userId == user.id ?\n          classes.myMessage :\n          classes.theirMessage\n        }\n        autoFocus={true}\n        key={props.messageId}\n      >\n        <Money {...props} what={what} />\n      </ListItem>\n    </>\n  )\n}\n\n\n//TODO: use function in chat tab\n\nfunction Message(props) {\n\n  switch (props.content.type) {\n    case \"TEXT\":\n    case \"text\":\n    case msg.ChatContent.ChatContentType.TEXT:\n      return <TextMessage {...props} />\n\n    case \"MONEY\":\n    case \"money\":\n    case msg.ChatContent.ChatContentType.MONEY:\n      return <MoneyMessage {...props} />\n  }\n  return (<></>)\n}\n\nexport default function MessageControl(props) {\n\n  const classes = useStyles();\n  const messageList = useSelector(selectMessageList);\n  const dispatch = useDispatch();\n  const currentChannel = useSelector(selectCurrentChannel);\n  const user = useSelector(selectUser);\n  const ws = useSelector(selectWs);\n  const typing = useSelector(selectTyping)\n\n  const [emoji, setEmoji] = useState({ open: false });\n  const [input, setInput] = useState('')\n\n  const onEmojiClick = (emoji) => {\n    //setEmoji({ open: false, obj: emojiObject });\n    setInput(i => i + emoji.native)\n  };\n\n  const handleEmoij = () => {\n    setEmoji({ open: true })\n  }\n\n  const scrollToBottom = () => {\n    if (props.messageListRef.current) {\n      props.messageListRef.current.scrollTop = props.messageListRef.current.scrollHeight\n    }\n  }\n\n  const onChatMessage = async (obj) => {\n    //console.log('onchat')\n    //console.log(obj)\n    if (!obj.createAt) {\n      obj.createAt = new Date().toUTCString()\n    }\n\n    dispatch(addMessageList(obj))\n    dispatch(addChatListMessage(obj))\n  }\n\n  const onTypingMessage = async (obj) => {\n    if (!obj.createAt) {\n      obj.createAt = new Date()\n    }\n    //console.log('typing')\n    //console.log(obj)\n    const timeout = 1400\n\n    if (obj.isTyping) {\n      if (obj.userId == user.id) return;\n\n      const name = await DataSource.getUserFullname(user.sessionId, obj.userId)\n\n      const cancel = setTimeout(() => {\n        dispatch(changeTyping({ showOnChatItem: false, show: false }))\n      }, timeout)\n\n      dispatch(changeTyping({\n        message: `${name} is typing...`,\n        showOnChatItem: true,\n        show: true,\n        last: obj.createAt,\n        cancel: cancel,\n        data: obj,\n      }))\n    } else {\n      //TODO: hanle\n    }\n  }\n\n  useEffect(() => {\n    async function getMessages() {\n      //console.log(user)\n      //console.log(currentChannel)\n      if (!user.sessionId || !currentChannel) return\n      const data = await DataSource.getMessageList(user.sessionId, currentChannel.id).then(res => res.data)\n      //console.log(data)\n      dispatch(changeMessageList(data))\n    }\n    getMessages();\n  }, [currentChannel]);\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messageList]);\n\n  useEffect(() => {\n    if (!WS.instance) return\n\n    WS.instance.onopen = async (evt) => {\n      console.log('websocket is opened')\n      dispatch(notify({ open: true, severity: 'success', message: 'websocket is opened' }))\n    }\n    WS.instance.onclose = async (evt) => {\n      console.log('websocket is closed')\n      dispatch(notify({ open: true, severity: 'error', message: 'websocket is closed' }))\n      // TODO: reconnect\n      //setTimeout(() => {}, 5000)\n    }\n\n    WS.addOnMessageCallback((incoming) => {\n      switch (incoming.getTypeCase()) {\n        case msg.InMessage.TypeCase.CHAT:\n          onChatMessage(incoming.getChat().toObject())\n          break;\n        case msg.InMessage.TypeCase.SEEN:\n          const seen = incoming.getSeen();\n          console.log('seen' + JSON.stringify(seen.toObject()));\n          break;\n        case msg.InMessage.TypeCase.STATUS:\n          const status = incoming.getStatus();\n          console.log('status: ' + JSON.stringify(status.toObject()));\n          break;\n        case msg.InMessage.TypeCase.TYPING:\n          const typing = incoming.getTyping().toObject();\n          onTypingMessage(typing)\n          break;\n        case msg.InMessage.TypeCase.NOTIFICATION:\n          const notification = incoming.getNotification();\n          console.log('notification: ' + JSON.stringify(notification.toObject()));\n          break;\n        default:\n          console.log(incoming.toObject());\n      }\n    })\n\n  }, [ws, user])\n\n  const [transaction, setTransaction] = useState({ open: false });\n  const [baokim, setBaokim] = useState({ open: false })\n\n  const handleCloseBaokimDialog = () => {\n    setBaokim({ open: false })\n  }\n  const handleTransferBaokimMoney = async () => {\n    try {\n\n      const toUser = currentChannel.members.find(u => u.userId != user.id);\n\n      const res = await DataSource.transferBaokim(user, toUser, baokim.amount, baokim.message)\n      const message = JSON.stringify(res.message || {})\n      if (res.code) {\n        dispatch(notify({ open: true, severity: 'error', message: message }))\n      } else {\n        dispatch(notify({ open: true, severity: 'info', message: 'Waiting for payment' }))\n      }\n    } catch (err) {\n      dispatch(notify({ open: true, severity: 'error', message: err.message }))\n    }\n    handleCloseBaokimDialog()\n  }\n\n  const handleOpenTransferDialog = () => {\n    setTransaction({ open: true })\n  }\n\n  const handleOpenTransferBaokimDialog = () => {\n    setBaokim({ open: true })\n  }\n\n  const handleCloseTransferDialog = () => {\n    setTransaction({ open: false })\n  }\n\n  const handleTransferMoney = async () => {\n    try {\n      const toUser = currentChannel.members.find(u => u.userId != user.id).userId;\n      const res = await DataSource.transfer(user.sessionId, toUser, transaction.amount, transaction.message)\n      if (res.error) {\n        dispatch(notify({ open: true, severity: 'error', message: res.message }))\n      } else {\n        dispatch(notify({ open: true, severity: 'success', message: res.message || 'Done' }))\n      }\n    } catch (err) {\n      dispatch(notify({ open: true, severity: 'error', message: err.message }))\n    }\n    handleCloseTransferDialog()\n  }\n\n  if (!currentChannel) {\n    return (\n      <>\n      </>\n    )\n  }\n\n  const sendChatMessage = (text) => {\n    const out = new msg.OutMessage();\n    const chat = new msg.Chat();\n    const chatContent = new msg.ChatContent();\n    chatContent.setContent(text);\n    chatContent.setReplyTo(null);\n    chatContent.setType(msg.ChatContent.ChatContentType.TEXT);\n\n    chat.setChannelId(currentChannel.id);\n    chat.setContent(chatContent);\n    chat.setTimestamp(Timestamp.fromDate(new Date()));\n    out.setChat(chat);\n    WS.instance.send(out.serializeBinary());\n  }\n\n  const sendTypingMessage = () => {\n    const out = new msg.OutMessage();\n    const typing = new msg.Typing()\n\n    typing.setChannelId(currentChannel.id);\n    typing.setUserId(user.id)\n    typing.setIsTyping(true)\n    typing.setTimestamp(Timestamp.fromDate(new Date()));\n    out.setTyping(typing);\n    const res = WS.instance.send(out.serializeBinary());\n  }\n\n  const delay = 500;\n  const handleTyping = throttle(() => {\n    sendTypingMessage()\n  }, delay)\n\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"relative\" color=\"default\" className={classes.appBar}>\n        <Toolbar>\n          <ChannelControl\n            type={currentChannel.type}\n            name={currentChannel.name}\n          />\n          {currentChannel.type == 'private' &&\n            <>\n              <Fab\n                color=\"primary\"\n                variant=\"extended\"\n                onClick={handleOpenTransferDialog}\n              >\n                <TransferWithinAStationIcon />\n              </Fab>\n              <Fab\n                color=\"default\"\n                variant=\"extended\"\n                onClick={handleOpenTransferBaokimDialog}\n              >\n                <BaoKimIcon />\n              </Fab>\n            </>\n          }\n        </Toolbar>\n\n      </AppBar>\n      <div className={classes.content}>\n        <List className={classes.list} ref={props.messageListRef}>\n          {messageList.map((message, index) => (\n            <Message {...message} previous={messageList[index - 1]} />\n          ))}\n        </List>\n      </div>\n\n      {typing && typing.show &&\n        <MuiAlert elevation={6} variant=\"filled\" severity=\"info\">\n          {typing.message}\n        </MuiAlert>\n      }\n\n      <Paper component=\"form\" className={classes.input}>\n        <OutlinedInput fullWidth\n          //classeName={classes.inputText}\n          // id=\"outlined-adornment-amount\"\n          multiline={true}\n          rowsMax={3}\n          value={input}\n          onChange={(e) => {\n            setInput(e.target.value)\n          }}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n              sendChatMessage(input);\n              dispatch(changeTyping({ showOnChatItem: false, show: false }))\n              setInput('')\n              e.preventDefault()\n            } else {\n              handleTyping()\n            }\n          }}\n        />\n        <UploadButtons />\n\n        <IconButton color=\"primary\" onClick={handleEmoij}>\n          <EmojiEmotionsIcon fontSize=\"medium\" />\n        </IconButton>\n\n        <IconButton color=\"primary\" onClick={() => {\n          sendChatMessage(input)\n          setInput('')\n        }}>\n          <SendIcon fontSize=\"large\" />\n        </IconButton>\n\n      </Paper>\n      <Dialog open={emoji.open} onClose={() => setEmoji({ open: false })}>\n        <DialogTitle id=\"form-dialog-title\">Pick emoji</DialogTitle>\n        <DialogContent>\n          <Picker set='apple' onSelect={onEmojiClick} />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={transaction.open} onClose={handleCloseTransferDialog} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Transfer money</DialogTitle>\n        <DialogContent>\n          <TextField\n            onChange={(evt) => setTransaction(t => ({ ...t, amount: evt.target.value }))}\n            autoFocus\n            margin=\"dense\"\n            id=\"amount\"\n            label=\"Amount:\"\n            fullWidth\n          />\n          <TextField\n            onChange={(evt) => setTransaction(t => ({ ...t, message: evt.target.value }))}\n            margin=\"dense\"\n            id=\"message\"\n            label=\"Messagge:\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleTransferMoney} color=\"primary\">\n            OK\n          </Button>\n          <Button onClick={handleCloseTransferDialog} color=\"secondary\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n\n      <Dialog open={baokim.open} onClose={handleCloseBaokimDialog} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Transfer Baokim money</DialogTitle>\n        <DialogContent>\n          <TextField\n            onChange={(evt) => setBaokim(b => ({ ...b, amount: +evt.target.value }))}\n            autoFocus\n            margin=\"dense\"\n            id=\"amount\"\n            label=\"Amount:\"\n            fullWidth\n          />\n          <TextField\n            onChange={(evt) => setBaokim(b => ({ ...b, message: evt.target.value }))}\n            margin=\"dense\"\n            id=\"message\"\n            label=\"Messagge:\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleTransferBaokimMoney} color=\"primary\">\n            OK\n          </Button>\n          <Button onClick={handleCloseBaokimDialog} color=\"secondary\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n    </div>\n  )\n}\n\nfunction BaoKimIcon() {\n  return (\n    <Avatar src=\"baokim.ico\" />\n  )\n}\n\n","/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/SignIn.js",[],"/home/giahuy/Documents/ZaloPay/quickchat-frontend-bak/src/components/TransactionHistory.js",["268","269","270","271","272","273","274","275","276"],"import React, { useState, useEffect } from 'react';\nimport {\n  Paper,\n  Typography,\n  Box,\n  List,\n  Divider,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  ListSubheader,\n  ListItemSecondaryAction,\n  Avatar,\n  Button,\n  Badge,\n  Grid,\n} from '@material-ui/core';\n\nimport { green } from '@material-ui/core/colors';\n\nimport TransferWithinAStationIcon from '@material-ui/icons/TransferWithinAStation';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport DoneIcon from '@material-ui/icons/Done';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles((theme) => ({\n  list: {\n    overflowY: 'auto',\n  },\n\n}))\n\n\n\nexport default function TransactionHistory(props) {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <List className={classes.list}>\n        <ListSubheader >\n          Transactions History\n          </ListSubheader >\n        {props.dataSource.map(history => (\n          <Paper>\n            <ListItem button key={history.requestId}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <Grid container justify=\"center\" spacing={2}>\n\n                    <Grid item>\n                      {history.type === \"deposit\" && <AddCircleIcon />}\n                      {history.type === \"transfer\" && <TransferWithinAStationIcon />}\n                      {history.type === \"withdraw\" && <RemoveIcon />}\n                    </Grid>\n\n                    <Grid item>\n                      <Typography>\n                        {history.type}\n                      </Typography>\n                    </Grid>\n\n                    <Grid item>\n                      <Typography>\n                        {history.amount > 0 ? `+${history.amount}` : history.amount}\n                      </Typography>\n                    </Grid>\n\n                    <Grid item>\n                      {history.status === \"success\"\n                        && <DoneIcon style={{ color: green[500] }} />}\n                      {history.status === \"error\"\n                        && <ErrorIcon color=\"action\" />}\n                    </Grid>\n\n                    <Grid item>\n                      <Typography>\n                        {history.createAt}\n                      </Typography>\n                    </Grid>\n\n                  </Grid>\n                </Grid>\n              </Grid>\n            </ListItem>\n            <Divider />\n          </Paper>\n        ))}\n      </List>\n    </React.Fragment>\n  )\n}\n\n",{"ruleId":"277","replacedBy":"278"},{"ruleId":"279","replacedBy":"280"},{"ruleId":"281","severity":1,"message":"282","line":4,"column":8,"nodeType":"283","messageId":"284","endLine":4,"endColumn":11},{"ruleId":"285","severity":1,"message":"286","line":64,"column":18,"nodeType":"287","messageId":"288","endLine":64,"endColumn":20},{"ruleId":"285","severity":1,"message":"286","line":64,"column":40,"nodeType":"287","messageId":"288","endLine":64,"endColumn":42},{"ruleId":"285","severity":1,"message":"286","line":68,"column":21,"nodeType":"287","messageId":"288","endLine":68,"endColumn":23},{"ruleId":"281","severity":1,"message":"289","line":69,"column":15,"nodeType":"283","messageId":"284","endLine":69,"endColumn":16},{"ruleId":"285","severity":1,"message":"286","line":104,"column":22,"nodeType":"287","messageId":"288","endLine":104,"endColumn":24},{"ruleId":"285","severity":1,"message":"290","line":171,"column":27,"nodeType":"287","messageId":"288","endLine":171,"endColumn":29},{"ruleId":"277","replacedBy":"291"},{"ruleId":"279","replacedBy":"292"},{"ruleId":"281","severity":1,"message":"293","line":4,"column":8,"nodeType":"283","messageId":"284","endLine":4,"endColumn":17},{"ruleId":"281","severity":1,"message":"294","line":8,"column":3,"nodeType":"283","messageId":"284","endLine":8,"endColumn":13},{"ruleId":"281","severity":1,"message":"295","line":21,"column":20,"nodeType":"283","messageId":"284","endLine":21,"endColumn":29},{"ruleId":"281","severity":1,"message":"296","line":35,"column":10,"nodeType":"283","messageId":"284","endLine":35,"endColumn":21},{"ruleId":"281","severity":1,"message":"297","line":35,"column":23,"nodeType":"283","messageId":"284","endLine":35,"endColumn":35},{"ruleId":"298","severity":1,"message":"299","line":56,"column":6,"nodeType":"300","endLine":56,"endColumn":12,"suggestions":"301"},{"ruleId":"298","severity":1,"message":"302","line":61,"column":6,"nodeType":"300","endLine":61,"endColumn":12,"suggestions":"303"},{"ruleId":"285","severity":1,"message":"286","line":170,"column":29,"nodeType":"287","messageId":"288","endLine":170,"endColumn":31},{"ruleId":"277","replacedBy":"304"},{"ruleId":"279","replacedBy":"305"},{"ruleId":"281","severity":1,"message":"293","line":3,"column":8,"nodeType":"283","messageId":"284","endLine":3,"endColumn":17},{"ruleId":"281","severity":1,"message":"295","line":26,"column":20,"nodeType":"283","messageId":"284","endLine":26,"endColumn":29},{"ruleId":"281","severity":1,"message":"306","line":31,"column":3,"nodeType":"283","messageId":"284","endLine":31,"endColumn":17},{"ruleId":"281","severity":1,"message":"307","line":35,"column":3,"nodeType":"283","messageId":"284","endLine":35,"endColumn":13},{"ruleId":"281","severity":1,"message":"308","line":38,"column":3,"nodeType":"283","messageId":"284","endLine":38,"endColumn":15},{"ruleId":"281","severity":1,"message":"309","line":43,"column":8,"nodeType":"283","messageId":"284","endLine":43,"endColumn":11},{"ruleId":"285","severity":1,"message":"286","line":145,"column":86,"nodeType":"287","messageId":"288","endLine":145,"endColumn":88},{"ruleId":"285","severity":1,"message":"286","line":149,"column":61,"nodeType":"287","messageId":"288","endLine":149,"endColumn":63},{"ruleId":"310","severity":1,"message":"311","line":163,"column":3,"nodeType":"312","messageId":"313","endLine":172,"endColumn":4},{"ruleId":"285","severity":1,"message":"286","line":178,"column":14,"nodeType":"287","messageId":"288","endLine":178,"endColumn":16},{"ruleId":"298","severity":1,"message":"314","line":206,"column":6,"nodeType":"300","endLine":206,"endColumn":18,"suggestions":"315"},{"ruleId":"285","severity":1,"message":"286","line":212,"column":75,"nodeType":"287","messageId":"288","endLine":212,"endColumn":77},{"ruleId":"281","severity":1,"message":"316","line":213,"column":12,"nodeType":"283","messageId":"284","endLine":213,"endColumn":16},{"ruleId":"281","severity":1,"message":"317","line":213,"column":26,"nodeType":"283","messageId":"284","endLine":213,"endColumn":33},{"ruleId":"285","severity":1,"message":"286","line":225,"column":40,"nodeType":"287","messageId":"288","endLine":225,"endColumn":42},{"ruleId":"285","severity":1,"message":"286","line":241,"column":29,"nodeType":"287","messageId":"288","endLine":241,"endColumn":31},{"ruleId":"285","severity":1,"message":"286","line":261,"column":31,"nodeType":"287","messageId":"288","endLine":261,"endColumn":33},{"ruleId":"277","replacedBy":"318"},{"ruleId":"279","replacedBy":"319"},{"ruleId":"277","severity":1,"message":"320","line":2,"column":16,"nodeType":"283","messageId":"321","endLine":2,"endColumn":19},{"ruleId":"277","replacedBy":"322"},{"ruleId":"279","replacedBy":"323"},{"ruleId":"281","severity":1,"message":"324","line":5,"column":8,"nodeType":"283","messageId":"284","endLine":5,"endColumn":25},{"ruleId":"281","severity":1,"message":"294","line":8,"column":8,"nodeType":"283","messageId":"284","endLine":8,"endColumn":18},{"ruleId":"281","severity":1,"message":"325","line":20,"column":8,"nodeType":"283","messageId":"284","endLine":20,"endColumn":31},{"ruleId":"281","severity":1,"message":"326","line":21,"column":8,"nodeType":"283","messageId":"284","endLine":21,"endColumn":16},{"ruleId":"281","severity":1,"message":"327","line":22,"column":8,"nodeType":"283","messageId":"284","endLine":22,"endColumn":18},{"ruleId":"281","severity":1,"message":"328","line":23,"column":8,"nodeType":"283","messageId":"284","endLine":23,"endColumn":19},{"ruleId":"285","severity":1,"message":"286","line":100,"column":18,"nodeType":"287","messageId":"288","endLine":100,"endColumn":20},{"ruleId":"285","severity":1,"message":"290","line":139,"column":57,"nodeType":"287","messageId":"288","endLine":139,"endColumn":59},{"ruleId":"285","severity":1,"message":"290","line":149,"column":51,"nodeType":"287","messageId":"288","endLine":149,"endColumn":53},{"ruleId":"281","severity":1,"message":"327","line":2,"column":8,"nodeType":"283","messageId":"284","endLine":2,"endColumn":18},{"ruleId":"281","severity":1,"message":"329","line":5,"column":8,"nodeType":"283","messageId":"284","endLine":5,"endColumn":16},{"ruleId":"277","replacedBy":"330"},{"ruleId":"279","replacedBy":"331"},{"ruleId":"277","replacedBy":"332"},{"ruleId":"279","replacedBy":"333"},{"ruleId":"281","severity":1,"message":"334","line":3,"column":8,"nodeType":"283","messageId":"284","endLine":3,"endColumn":18},{"ruleId":"285","severity":1,"message":"286","line":40,"column":31,"nodeType":"287","messageId":"288","endLine":40,"endColumn":33},{"ruleId":"285","severity":1,"message":"286","line":54,"column":29,"nodeType":"287","messageId":"288","endLine":54,"endColumn":31},{"ruleId":"285","severity":1,"message":"290","line":55,"column":15,"nodeType":"287","messageId":"288","endLine":55,"endColumn":17},{"ruleId":"285","severity":1,"message":"286","line":59,"column":35,"nodeType":"287","messageId":"288","endLine":59,"endColumn":37},{"ruleId":"285","severity":1,"message":"286","line":72,"column":34,"nodeType":"287","messageId":"288","endLine":72,"endColumn":36},{"ruleId":"285","severity":1,"message":"286","line":84,"column":29,"nodeType":"287","messageId":"288","endLine":84,"endColumn":31},{"ruleId":"285","severity":1,"message":"290","line":85,"column":15,"nodeType":"287","messageId":"288","endLine":85,"endColumn":17},{"ruleId":"285","severity":1,"message":"286","line":110,"column":35,"nodeType":"287","messageId":"288","endLine":110,"endColumn":37},{"ruleId":"281","severity":1,"message":"335","line":3,"column":8,"nodeType":"283","messageId":"284","endLine":3,"endColumn":14},{"ruleId":"277","replacedBy":"336"},{"ruleId":"279","replacedBy":"337"},{"ruleId":"281","severity":1,"message":"335","line":10,"column":8,"nodeType":"283","messageId":"284","endLine":10,"endColumn":14},{"ruleId":"281","severity":1,"message":"338","line":11,"column":8,"nodeType":"283","messageId":"284","endLine":11,"endColumn":13},{"ruleId":"281","severity":1,"message":"339","line":17,"column":8,"nodeType":"283","messageId":"284","endLine":17,"endColumn":14},{"ruleId":"281","severity":1,"message":"307","line":21,"column":22,"nodeType":"283","messageId":"284","endLine":21,"endColumn":32},{"ruleId":"281","severity":1,"message":"340","line":206,"column":7,"nodeType":"283","messageId":"284","endLine":206,"endColumn":19},{"ruleId":"281","severity":1,"message":"341","line":226,"column":10,"nodeType":"283","messageId":"284","endLine":226,"endColumn":24},{"ruleId":"285","severity":1,"message":"286","line":288,"column":26,"nodeType":"287","messageId":"288","endLine":288,"endColumn":28},{"ruleId":"285","severity":1,"message":"286","line":300,"column":26,"nodeType":"287","messageId":"288","endLine":300,"endColumn":28},{"ruleId":"277","replacedBy":"342"},{"ruleId":"279","replacedBy":"343"},{"ruleId":"281","severity":1,"message":"344","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":25},{"ruleId":"281","severity":1,"message":"345","line":2,"column":10,"nodeType":"283","messageId":"284","endLine":2,"endColumn":21},{"ruleId":"281","severity":1,"message":"346","line":2,"column":23,"nodeType":"283","messageId":"284","endLine":2,"endColumn":34},{"ruleId":"281","severity":1,"message":"338","line":5,"column":3,"nodeType":"283","messageId":"284","endLine":5,"endColumn":8},{"ruleId":"281","severity":1,"message":"294","line":6,"column":3,"nodeType":"283","messageId":"284","endLine":6,"endColumn":13},{"ruleId":"281","severity":1,"message":"347","line":7,"column":3,"nodeType":"283","messageId":"284","endLine":7,"endColumn":6},{"ruleId":"277","replacedBy":"348"},{"ruleId":"279","replacedBy":"349"},{"ruleId":"281","severity":1,"message":"293","line":3,"column":8,"nodeType":"283","messageId":"284","endLine":3,"endColumn":17},{"ruleId":"281","severity":1,"message":"294","line":8,"column":3,"nodeType":"283","messageId":"284","endLine":8,"endColumn":13},{"ruleId":"281","severity":1,"message":"350","line":21,"column":8,"nodeType":"283","messageId":"284","endLine":21,"endColumn":15},{"ruleId":"281","severity":1,"message":"295","line":26,"column":20,"nodeType":"283","messageId":"284","endLine":26,"endColumn":29},{"ruleId":"281","severity":1,"message":"308","line":32,"column":3,"nodeType":"283","messageId":"284","endLine":32,"endColumn":15},{"ruleId":"298","severity":1,"message":"351","line":111,"column":6,"nodeType":"300","endLine":111,"endColumn":12,"suggestions":"352"},{"ruleId":"285","severity":1,"message":"286","line":124,"column":21,"nodeType":"287","messageId":"288","endLine":124,"endColumn":23},{"ruleId":"285","severity":1,"message":"286","line":138,"column":21,"nodeType":"287","messageId":"288","endLine":138,"endColumn":23},{"ruleId":"285","severity":1,"message":"286","line":165,"column":21,"nodeType":"287","messageId":"288","endLine":165,"endColumn":23},{"ruleId":"281","severity":1,"message":"344","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":25},{"ruleId":"281","severity":1,"message":"353","line":3,"column":8,"nodeType":"283","messageId":"284","endLine":3,"endColumn":12},{"ruleId":"281","severity":1,"message":"335","line":6,"column":3,"nodeType":"283","messageId":"284","endLine":6,"endColumn":9},{"ruleId":"281","severity":1,"message":"354","line":9,"column":3,"nodeType":"283","messageId":"284","endLine":9,"endColumn":8},{"ruleId":"281","severity":1,"message":"355","line":10,"column":3,"nodeType":"283","messageId":"284","endLine":10,"endColumn":9},{"ruleId":"281","severity":1,"message":"338","line":12,"column":3,"nodeType":"283","messageId":"284","endLine":12,"endColumn":8},{"ruleId":"281","severity":1,"message":"347","line":15,"column":3,"nodeType":"283","messageId":"284","endLine":15,"endColumn":6},{"ruleId":"281","severity":1,"message":"294","line":16,"column":3,"nodeType":"283","messageId":"284","endLine":16,"endColumn":13},{"ruleId":"281","severity":1,"message":"356","line":23,"column":8,"nodeType":"283","messageId":"284","endLine":23,"endColumn":17},{"ruleId":"281","severity":1,"message":"357","line":24,"column":8,"nodeType":"283","messageId":"284","endLine":24,"endColumn":20},{"ruleId":"281","severity":1,"message":"358","line":25,"column":8,"nodeType":"283","messageId":"284","endLine":25,"endColumn":21},{"ruleId":"281","severity":1,"message":"359","line":28,"column":10,"nodeType":"283","messageId":"284","endLine":28,"endColumn":15},{"ruleId":"281","severity":1,"message":"309","line":37,"column":8,"nodeType":"283","messageId":"284","endLine":37,"endColumn":11},{"ruleId":"281","severity":1,"message":"360","line":44,"column":3,"nodeType":"283","messageId":"284","endLine":44,"endColumn":17},{"ruleId":"281","severity":1,"message":"361","line":53,"column":8,"nodeType":"283","messageId":"284","endLine":53,"endColumn":22},{"ruleId":"281","severity":1,"message":"362","line":58,"column":7,"nodeType":"283","messageId":"284","endLine":58,"endColumn":12},{"ruleId":"281","severity":1,"message":"363","line":99,"column":9,"nodeType":"283","messageId":"284","endLine":99,"endColumn":13},{"ruleId":"281","severity":1,"message":"364","line":114,"column":9,"nodeType":"283","messageId":"284","endLine":114,"endColumn":11},{"ruleId":"298","severity":1,"message":"365","line":125,"column":6,"nodeType":"300","endLine":125,"endColumn":8,"suggestions":"366"},{"ruleId":"298","severity":1,"message":"365","line":134,"column":6,"nodeType":"300","endLine":134,"endColumn":12,"suggestions":"367"},{"ruleId":"298","severity":1,"message":"365","line":142,"column":6,"nodeType":"300","endLine":142,"endColumn":12,"suggestions":"368"},{"ruleId":"281","severity":1,"message":"369","line":17,"column":3,"nodeType":"283","messageId":"284","endLine":17,"endColumn":15},{"ruleId":"281","severity":1,"message":"370","line":18,"column":3,"nodeType":"283","messageId":"284","endLine":18,"endColumn":17},{"ruleId":"281","severity":1,"message":"371","line":23,"column":3,"nodeType":"283","messageId":"284","endLine":23,"endColumn":14},{"ruleId":"281","severity":1,"message":"372","line":43,"column":8,"nodeType":"283","messageId":"284","endLine":43,"endColumn":18},{"ruleId":"281","severity":1,"message":"373","line":56,"column":3,"nodeType":"283","messageId":"284","endLine":56,"endColumn":11},{"ruleId":"281","severity":1,"message":"360","line":59,"column":3,"nodeType":"283","messageId":"284","endLine":59,"endColumn":17},{"ruleId":"281","severity":1,"message":"306","line":60,"column":3,"nodeType":"283","messageId":"284","endLine":60,"endColumn":17},{"ruleId":"281","severity":1,"message":"308","line":61,"column":3,"nodeType":"283","messageId":"284","endLine":61,"endColumn":15},{"ruleId":"281","severity":1,"message":"374","line":74,"column":7,"nodeType":"283","messageId":"284","endLine":74,"endColumn":18},{"ruleId":"281","severity":1,"message":"375","line":133,"column":9,"nodeType":"283","messageId":"284","endLine":133,"endColumn":16},{"ruleId":"376","severity":1,"message":"377","line":136,"column":3,"nodeType":"378","messageId":"379","endLine":147,"endColumn":4},{"ruleId":"285","severity":1,"message":"286","line":192,"column":29,"nodeType":"287","messageId":"288","endLine":192,"endColumn":31},{"ruleId":"285","severity":1,"message":"290","line":192,"column":51,"nodeType":"287","messageId":"288","endLine":192,"endColumn":53},{"ruleId":"298","severity":1,"message":"380","line":195,"column":6,"nodeType":"300","endLine":195,"endColumn":23,"suggestions":"381"},{"ruleId":"285","severity":1,"message":"286","line":221,"column":33,"nodeType":"287","messageId":"288","endLine":221,"endColumn":35},{"ruleId":"285","severity":1,"message":"286","line":248,"column":33,"nodeType":"287","messageId":"288","endLine":248,"endColumn":35},{"ruleId":"285","severity":1,"message":"286","line":260,"column":14,"nodeType":"287","messageId":"288","endLine":260,"endColumn":16},{"ruleId":"281","severity":1,"message":"382","line":279,"column":10,"nodeType":"283","messageId":"284","endLine":279,"endColumn":22},{"ruleId":"285","severity":1,"message":"286","line":305,"column":29,"nodeType":"287","messageId":"288","endLine":305,"endColumn":31},{"ruleId":"281","severity":1,"message":"383","line":306,"column":9,"nodeType":"283","messageId":"284","endLine":306,"endColumn":20},{"ruleId":"285","severity":1,"message":"286","line":316,"column":33,"nodeType":"287","messageId":"288","endLine":316,"endColumn":35},{"ruleId":"310","severity":1,"message":"311","line":334,"column":3,"nodeType":"312","messageId":"313","endLine":344,"endColumn":4},{"ruleId":"285","severity":1,"message":"286","line":396,"column":22,"nodeType":"287","messageId":"288","endLine":396,"endColumn":24},{"ruleId":"298","severity":1,"message":"384","line":427,"column":6,"nodeType":"300","endLine":427,"endColumn":22,"suggestions":"385"},{"ruleId":"298","severity":1,"message":"386","line":431,"column":6,"nodeType":"300","endLine":431,"endColumn":19,"suggestions":"387"},{"ruleId":"298","severity":1,"message":"388","line":473,"column":6,"nodeType":"300","endLine":473,"endColumn":16,"suggestions":"389"},{"ruleId":"285","severity":1,"message":"290","line":484,"column":64,"nodeType":"287","messageId":"288","endLine":484,"endColumn":66},{"ruleId":"285","severity":1,"message":"290","line":513,"column":64,"nodeType":"287","messageId":"288","endLine":513,"endColumn":66},{"ruleId":"281","severity":1,"message":"390","line":557,"column":11,"nodeType":"283","messageId":"284","endLine":557,"endColumn":14},{"ruleId":"285","severity":1,"message":"286","line":574,"column":32,"nodeType":"287","messageId":"288","endLine":574,"endColumn":34},{"ruleId":"281","severity":1,"message":"344","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":25},{"ruleId":"281","severity":1,"message":"391","line":1,"column":27,"nodeType":"283","messageId":"284","endLine":1,"endColumn":36},{"ruleId":"281","severity":1,"message":"347","line":5,"column":3,"nodeType":"283","messageId":"284","endLine":5,"endColumn":6},{"ruleId":"281","severity":1,"message":"369","line":9,"column":3,"nodeType":"283","messageId":"284","endLine":9,"endColumn":15},{"ruleId":"281","severity":1,"message":"370","line":10,"column":3,"nodeType":"283","messageId":"284","endLine":10,"endColumn":17},{"ruleId":"281","severity":1,"message":"325","line":12,"column":3,"nodeType":"283","messageId":"284","endLine":12,"endColumn":26},{"ruleId":"281","severity":1,"message":"392","line":13,"column":3,"nodeType":"283","messageId":"284","endLine":13,"endColumn":9},{"ruleId":"281","severity":1,"message":"335","line":14,"column":3,"nodeType":"283","messageId":"284","endLine":14,"endColumn":9},{"ruleId":"281","severity":1,"message":"393","line":15,"column":3,"nodeType":"283","messageId":"284","endLine":15,"endColumn":8},"no-native-reassign",["394"],"no-negated-in-lhs",["395"],"no-unused-vars","'jwt' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'m' is assigned a value but never used.","Expected '!==' and instead saw '!='.",["394"],["395"],"'PropTypes' is defined but never used.","'Typography' is defined but never used.","'a11yProps' is defined but never used.","'UserControl' is defined but never used.","'BadgeAvatars' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMoneyInfo'. Either include it or remove the dependency array.","ArrayExpression",["396"],"React Hook useEffect has a missing dependency: 'getTransactionHistory'. Either include it or remove the dependency array.",["397"],["394"],["395"],"'changeChatList' is defined but never used.","'changeUser' is defined but never used.","'selectNotify' is defined but never used.","'URL' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'props.lastMessage.userId'. Either include it or remove the dependency array.",["398"],"'type' is assigned a value but never used.","'message' is assigned a value but never used.",["394"],["395"],"Read-only global 'URL' should not be modified.","nativeReassign",["394"],["395"],"'DialogContentText' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'Checkbox' is defined but never used.","'IconButton' is defined but never used.","'CommentIcon' is defined but never used.","'MenuIcon' is defined but never used.",["394"],["395"],["394"],["395"],"'DataSource' is defined but never used.","'Button' is defined but never used.",["394"],["395"],"'Paper' is defined but never used.","'Hidden' is defined but never used.","'StatusAvatar' is assigned a value but never used.","'NoBadgeAvatars' is defined but never used.",["394"],["395"],"'useState' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","'Box' is defined but never used.",["394"],["395"],"'AddIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'getFriends'. Either include it or remove the dependency array.",["399"],"'logo' is defined but never used.","'Input' is defined but never used.","'Drawer' is defined but never used.","'PhoneIcon' is defined but never used.","'FavoriteIcon' is defined but never used.","'PersonPinIcon' is defined but never used.","'green' is defined but never used.","'selectChatList' is defined but never used.","'FakeDataSource' is defined but never used.","'theme' is assigned a value but never used.","'user' is assigned a value but never used.","'ws' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["400"],["401"],["402"],"'ListItemText' is defined but never used.","'ListItemAvatar' is defined but never used.","'CardActions' is defined but never used.","'PersonIcon' is defined but never used.","'changeWs' is defined but never used.","'inputHeight' is assigned a value but never used.","'classes' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","React Hook useEffect has missing dependencies: 'currentChannel.type', 'props.userId', 'user.id', and 'user.sessionId'. Either include them or remove the dependency array.",["403"],"'getMoneyType' is defined but never used.","'handleClick' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'user.sessionId'. Either include them or remove the dependency array.",["404"],"React Hook useEffect has a missing dependency: 'scrollToBottom'. Either include it or remove the dependency array.",["405"],"React Hook useEffect has missing dependencies: 'dispatch', 'onChatMessage', and 'onTypingMessage'. Either include them or remove the dependency array.",["406"],"'res' is assigned a value but never used.","'useEffect' is defined but never used.","'Avatar' is defined but never used.","'Badge' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"417","fix":"419"},{"desc":"420","fix":"421"},{"desc":"422","fix":"423"},{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},"Update the dependencies array to be: [getMoneyInfo, user]",{"range":"428","text":"429"},"Update the dependencies array to be: [getTransactionHistory, user]",{"range":"430","text":"431"},"Update the dependencies array to be: [props.lastMessage.userId, props.user]",{"range":"432","text":"433"},"Update the dependencies array to be: [getFriends, user]",{"range":"434","text":"435"},"Update the dependencies array to be: [dispatch]",{"range":"436","text":"437"},"Update the dependencies array to be: [dispatch, user]",{"range":"438","text":"439"},{"range":"440","text":"439"},"Update the dependencies array to be: [currentChannel.type, props.messageId, props.userId, user.id, user.sessionId]",{"range":"441","text":"442"},"Update the dependencies array to be: [currentChannel, dispatch, user.sessionId]",{"range":"443","text":"444"},"Update the dependencies array to be: [messageList, scrollToBottom]",{"range":"445","text":"446"},"Update the dependencies array to be: [ws, user, dispatch, onChatMessage, onTypingMessage]",{"range":"447","text":"448"},[1525,1531],"[getMoneyInfo, user]",[1590,1596],"[getTransactionHistory, user]",[5018,5030],"[props.lastMessage.userId, props.user]",[2754,2760],"[getFriends, user]",[2884,2886],"[dispatch]",[3140,3146],"[dispatch, user]",[3408,3414],[4180,4197],"[currentChannel.type, props.messageId, props.userId, user.id, user.sessionId]",[9792,9808],"[currentChannel, dispatch, user.sessionId]",[9858,9871],"[messageList, scrollToBottom]",[11335,11345],"[ws, user, dispatch, onChatMessage, onTypingMessage]"]