// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_friend_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_friend_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "friend.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_friend_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_friend_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friend_5fservice_2eproto;
namespace srv {
class BaseReponse;
class BaseReponseDefaultTypeInternal;
extern BaseReponseDefaultTypeInternal _BaseReponse_default_instance_;
class BaseRequest;
class BaseRequestDefaultTypeInternal;
extern BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
class ChangeFriendStatusRequest;
class ChangeFriendStatusRequestDefaultTypeInternal;
extern ChangeFriendStatusRequestDefaultTypeInternal _ChangeFriendStatusRequest_default_instance_;
class ListUserFriendsReponse;
class ListUserFriendsReponseDefaultTypeInternal;
extern ListUserFriendsReponseDefaultTypeInternal _ListUserFriendsReponse_default_instance_;
class ListUserFriendsRequest;
class ListUserFriendsRequestDefaultTypeInternal;
extern ListUserFriendsRequestDefaultTypeInternal _ListUserFriendsRequest_default_instance_;
}  // namespace srv
PROTOBUF_NAMESPACE_OPEN
template<> ::srv::BaseReponse* Arena::CreateMaybeMessage<::srv::BaseReponse>(Arena*);
template<> ::srv::BaseRequest* Arena::CreateMaybeMessage<::srv::BaseRequest>(Arena*);
template<> ::srv::ChangeFriendStatusRequest* Arena::CreateMaybeMessage<::srv::ChangeFriendStatusRequest>(Arena*);
template<> ::srv::ListUserFriendsReponse* Arena::CreateMaybeMessage<::srv::ListUserFriendsReponse>(Arena*);
template<> ::srv::ListUserFriendsRequest* Arena::CreateMaybeMessage<::srv::ListUserFriendsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace srv {

// ===================================================================

class ListUserFriendsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.ListUserFriendsRequest) */ {
 public:
  inline ListUserFriendsRequest() : ListUserFriendsRequest(nullptr) {};
  virtual ~ListUserFriendsRequest();

  ListUserFriendsRequest(const ListUserFriendsRequest& from);
  ListUserFriendsRequest(ListUserFriendsRequest&& from) noexcept
    : ListUserFriendsRequest() {
    *this = ::std::move(from);
  }

  inline ListUserFriendsRequest& operator=(const ListUserFriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserFriendsRequest& operator=(ListUserFriendsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUserFriendsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUserFriendsRequest* internal_default_instance() {
    return reinterpret_cast<const ListUserFriendsRequest*>(
               &_ListUserFriendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListUserFriendsRequest& a, ListUserFriendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserFriendsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserFriendsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserFriendsRequest* New() const final {
    return CreateMaybeMessage<ListUserFriendsRequest>(nullptr);
  }

  ListUserFriendsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserFriendsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUserFriendsRequest& from);
  void MergeFrom(const ListUserFriendsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserFriendsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.ListUserFriendsRequest";
  }
  protected:
  explicit ListUserFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_5fservice_2eproto);
    return ::descriptor_table_friend_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.ListUserFriendsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friend_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListUserFriendsReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.ListUserFriendsReponse) */ {
 public:
  inline ListUserFriendsReponse() : ListUserFriendsReponse(nullptr) {};
  virtual ~ListUserFriendsReponse();

  ListUserFriendsReponse(const ListUserFriendsReponse& from);
  ListUserFriendsReponse(ListUserFriendsReponse&& from) noexcept
    : ListUserFriendsReponse() {
    *this = ::std::move(from);
  }

  inline ListUserFriendsReponse& operator=(const ListUserFriendsReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserFriendsReponse& operator=(ListUserFriendsReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUserFriendsReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUserFriendsReponse* internal_default_instance() {
    return reinterpret_cast<const ListUserFriendsReponse*>(
               &_ListUserFriendsReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListUserFriendsReponse& a, ListUserFriendsReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserFriendsReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserFriendsReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserFriendsReponse* New() const final {
    return CreateMaybeMessage<ListUserFriendsReponse>(nullptr);
  }

  ListUserFriendsReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserFriendsReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUserFriendsReponse& from);
  void MergeFrom(const ListUserFriendsReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserFriendsReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.ListUserFriendsReponse";
  }
  protected:
  explicit ListUserFriendsReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_5fservice_2eproto);
    return ::descriptor_table_friend_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
    kSentRequestsFieldNumber = 2,
    kReceivedRequestsFieldNumber = 3,
  };
  // repeated .msg.Friend friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::msg::Friend* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >*
      mutable_friends();
  private:
  const ::msg::Friend& _internal_friends(int index) const;
  ::msg::Friend* _internal_add_friends();
  public:
  const ::msg::Friend& friends(int index) const;
  ::msg::Friend* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >&
      friends() const;

  // repeated .msg.Friend sent_requests = 2;
  int sent_requests_size() const;
  private:
  int _internal_sent_requests_size() const;
  public:
  void clear_sent_requests();
  ::msg::Friend* mutable_sent_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >*
      mutable_sent_requests();
  private:
  const ::msg::Friend& _internal_sent_requests(int index) const;
  ::msg::Friend* _internal_add_sent_requests();
  public:
  const ::msg::Friend& sent_requests(int index) const;
  ::msg::Friend* add_sent_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >&
      sent_requests() const;

  // repeated .msg.Friend received_requests = 3;
  int received_requests_size() const;
  private:
  int _internal_received_requests_size() const;
  public:
  void clear_received_requests();
  ::msg::Friend* mutable_received_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >*
      mutable_received_requests();
  private:
  const ::msg::Friend& _internal_received_requests(int index) const;
  ::msg::Friend* _internal_add_received_requests();
  public:
  const ::msg::Friend& received_requests(int index) const;
  ::msg::Friend* add_received_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >&
      received_requests() const;

  // @@protoc_insertion_point(class_scope:srv.ListUserFriendsReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend > friends_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend > sent_requests_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend > received_requests_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friend_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BaseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.BaseRequest) */ {
 public:
  inline BaseRequest() : BaseRequest(nullptr) {};
  virtual ~BaseRequest();

  BaseRequest(const BaseRequest& from);
  BaseRequest(BaseRequest&& from) noexcept
    : BaseRequest() {
    *this = ::std::move(from);
  }

  inline BaseRequest& operator=(const BaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseRequest& operator=(BaseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseRequest* internal_default_instance() {
    return reinterpret_cast<const BaseRequest*>(
               &_BaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BaseRequest& a, BaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseRequest* New() const final {
    return CreateMaybeMessage<BaseRequest>(nullptr);
  }

  BaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseRequest& from);
  void MergeFrom(const BaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.BaseRequest";
  }
  protected:
  explicit BaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_5fservice_2eproto);
    return ::descriptor_table_friend_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateAtFieldNumber = 3,
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // .google.protobuf.Timestamp create_at = 3;
  bool has_create_at() const;
  private:
  bool _internal_has_create_at() const;
  public:
  void clear_create_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_at();
  void set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_at();
  public:
  void unsafe_arena_set_allocated_create_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_at();

  // uint64 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint64 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint64 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.BaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_at_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friend_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BaseReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.BaseReponse) */ {
 public:
  inline BaseReponse() : BaseReponse(nullptr) {};
  virtual ~BaseReponse();

  BaseReponse(const BaseReponse& from);
  BaseReponse(BaseReponse&& from) noexcept
    : BaseReponse() {
    *this = ::std::move(from);
  }

  inline BaseReponse& operator=(const BaseReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseReponse& operator=(BaseReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseReponse* internal_default_instance() {
    return reinterpret_cast<const BaseReponse*>(
               &_BaseReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BaseReponse& a, BaseReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseReponse* New() const final {
    return CreateMaybeMessage<BaseReponse>(nullptr);
  }

  BaseReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseReponse& from);
  void MergeFrom(const BaseReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.BaseReponse";
  }
  protected:
  explicit BaseReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_5fservice_2eproto);
    return ::descriptor_table_friend_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kCreateAtFieldNumber = 3,
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // string message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Timestamp create_at = 3;
  bool has_create_at() const;
  private:
  bool _internal_has_create_at() const;
  public:
  void clear_create_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_at();
  void set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_at();
  public:
  void unsafe_arena_set_allocated_create_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_at();

  // uint64 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint64 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint64 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.BaseReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_at_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friend_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ChangeFriendStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.ChangeFriendStatusRequest) */ {
 public:
  inline ChangeFriendStatusRequest() : ChangeFriendStatusRequest(nullptr) {};
  virtual ~ChangeFriendStatusRequest();

  ChangeFriendStatusRequest(const ChangeFriendStatusRequest& from);
  ChangeFriendStatusRequest(ChangeFriendStatusRequest&& from) noexcept
    : ChangeFriendStatusRequest() {
    *this = ::std::move(from);
  }

  inline ChangeFriendStatusRequest& operator=(const ChangeFriendStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeFriendStatusRequest& operator=(ChangeFriendStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeFriendStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeFriendStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeFriendStatusRequest*>(
               &_ChangeFriendStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChangeFriendStatusRequest& a, ChangeFriendStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeFriendStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeFriendStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeFriendStatusRequest* New() const final {
    return CreateMaybeMessage<ChangeFriendStatusRequest>(nullptr);
  }

  ChangeFriendStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeFriendStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeFriendStatusRequest& from);
  void MergeFrom(const ChangeFriendStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeFriendStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.ChangeFriendStatusRequest";
  }
  protected:
  explicit ChangeFriendStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_5fservice_2eproto);
    return ::descriptor_table_friend_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 3,
    kCreateAtFieldNumber = 4,
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // string status = 3;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .google.protobuf.Timestamp create_at = 4;
  bool has_create_at() const;
  private:
  bool _internal_has_create_at() const;
  public:
  void clear_create_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_at();
  void set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_at();
  public:
  void unsafe_arena_set_allocated_create_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_at();

  // uint64 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint64 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint64 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.ChangeFriendStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_at_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friend_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListUserFriendsRequest

// uint64 user_id = 1;
inline void ListUserFriendsRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListUserFriendsRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListUserFriendsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:srv.ListUserFriendsRequest.user_id)
  return _internal_user_id();
}
inline void ListUserFriendsRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void ListUserFriendsRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:srv.ListUserFriendsRequest.user_id)
}

// -------------------------------------------------------------------

// ListUserFriendsReponse

// repeated .msg.Friend friends = 1;
inline int ListUserFriendsReponse::_internal_friends_size() const {
  return friends_.size();
}
inline int ListUserFriendsReponse::friends_size() const {
  return _internal_friends_size();
}
inline ::msg::Friend* ListUserFriendsReponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:srv.ListUserFriendsReponse.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >*
ListUserFriendsReponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:srv.ListUserFriendsReponse.friends)
  return &friends_;
}
inline const ::msg::Friend& ListUserFriendsReponse::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::msg::Friend& ListUserFriendsReponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:srv.ListUserFriendsReponse.friends)
  return _internal_friends(index);
}
inline ::msg::Friend* ListUserFriendsReponse::_internal_add_friends() {
  return friends_.Add();
}
inline ::msg::Friend* ListUserFriendsReponse::add_friends() {
  // @@protoc_insertion_point(field_add:srv.ListUserFriendsReponse.friends)
  return _internal_add_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >&
ListUserFriendsReponse::friends() const {
  // @@protoc_insertion_point(field_list:srv.ListUserFriendsReponse.friends)
  return friends_;
}

// repeated .msg.Friend sent_requests = 2;
inline int ListUserFriendsReponse::_internal_sent_requests_size() const {
  return sent_requests_.size();
}
inline int ListUserFriendsReponse::sent_requests_size() const {
  return _internal_sent_requests_size();
}
inline ::msg::Friend* ListUserFriendsReponse::mutable_sent_requests(int index) {
  // @@protoc_insertion_point(field_mutable:srv.ListUserFriendsReponse.sent_requests)
  return sent_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >*
ListUserFriendsReponse::mutable_sent_requests() {
  // @@protoc_insertion_point(field_mutable_list:srv.ListUserFriendsReponse.sent_requests)
  return &sent_requests_;
}
inline const ::msg::Friend& ListUserFriendsReponse::_internal_sent_requests(int index) const {
  return sent_requests_.Get(index);
}
inline const ::msg::Friend& ListUserFriendsReponse::sent_requests(int index) const {
  // @@protoc_insertion_point(field_get:srv.ListUserFriendsReponse.sent_requests)
  return _internal_sent_requests(index);
}
inline ::msg::Friend* ListUserFriendsReponse::_internal_add_sent_requests() {
  return sent_requests_.Add();
}
inline ::msg::Friend* ListUserFriendsReponse::add_sent_requests() {
  // @@protoc_insertion_point(field_add:srv.ListUserFriendsReponse.sent_requests)
  return _internal_add_sent_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >&
ListUserFriendsReponse::sent_requests() const {
  // @@protoc_insertion_point(field_list:srv.ListUserFriendsReponse.sent_requests)
  return sent_requests_;
}

// repeated .msg.Friend received_requests = 3;
inline int ListUserFriendsReponse::_internal_received_requests_size() const {
  return received_requests_.size();
}
inline int ListUserFriendsReponse::received_requests_size() const {
  return _internal_received_requests_size();
}
inline ::msg::Friend* ListUserFriendsReponse::mutable_received_requests(int index) {
  // @@protoc_insertion_point(field_mutable:srv.ListUserFriendsReponse.received_requests)
  return received_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >*
ListUserFriendsReponse::mutable_received_requests() {
  // @@protoc_insertion_point(field_mutable_list:srv.ListUserFriendsReponse.received_requests)
  return &received_requests_;
}
inline const ::msg::Friend& ListUserFriendsReponse::_internal_received_requests(int index) const {
  return received_requests_.Get(index);
}
inline const ::msg::Friend& ListUserFriendsReponse::received_requests(int index) const {
  // @@protoc_insertion_point(field_get:srv.ListUserFriendsReponse.received_requests)
  return _internal_received_requests(index);
}
inline ::msg::Friend* ListUserFriendsReponse::_internal_add_received_requests() {
  return received_requests_.Add();
}
inline ::msg::Friend* ListUserFriendsReponse::add_received_requests() {
  // @@protoc_insertion_point(field_add:srv.ListUserFriendsReponse.received_requests)
  return _internal_add_received_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >&
ListUserFriendsReponse::received_requests() const {
  // @@protoc_insertion_point(field_list:srv.ListUserFriendsReponse.received_requests)
  return received_requests_;
}

// -------------------------------------------------------------------

// BaseRequest

// uint64 from = 1;
inline void BaseRequest::clear_from() {
  from_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseRequest::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseRequest::from() const {
  // @@protoc_insertion_point(field_get:srv.BaseRequest.from)
  return _internal_from();
}
inline void BaseRequest::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  from_ = value;
}
inline void BaseRequest::set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:srv.BaseRequest.from)
}

// uint64 to = 2;
inline void BaseRequest::clear_to() {
  to_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseRequest::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseRequest::to() const {
  // @@protoc_insertion_point(field_get:srv.BaseRequest.to)
  return _internal_to();
}
inline void BaseRequest::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  to_ = value;
}
inline void BaseRequest::set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:srv.BaseRequest.to)
}

// .google.protobuf.Timestamp create_at = 3;
inline bool BaseRequest::_internal_has_create_at() const {
  return this != internal_default_instance() && create_at_ != nullptr;
}
inline bool BaseRequest::has_create_at() const {
  return _internal_has_create_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BaseRequest::_internal_create_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BaseRequest::create_at() const {
  // @@protoc_insertion_point(field_get:srv.BaseRequest.create_at)
  return _internal_create_at();
}
inline void BaseRequest::unsafe_arena_set_allocated_create_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  create_at_ = create_at;
  if (create_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.BaseRequest.create_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BaseRequest::release_create_at() {
  auto temp = unsafe_arena_release_create_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BaseRequest::unsafe_arena_release_create_at() {
  // @@protoc_insertion_point(field_release:srv.BaseRequest.create_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_at_;
  create_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BaseRequest::_internal_mutable_create_at() {
  
  if (create_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_at_ = p;
  }
  return create_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BaseRequest::mutable_create_at() {
  // @@protoc_insertion_point(field_mutable:srv.BaseRequest.create_at)
  return _internal_mutable_create_at();
}
inline void BaseRequest::set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  if (create_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at)->GetArena();
    if (message_arena != submessage_arena) {
      create_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_at, submessage_arena);
    }
    
  } else {
    
  }
  create_at_ = create_at;
  // @@protoc_insertion_point(field_set_allocated:srv.BaseRequest.create_at)
}

// -------------------------------------------------------------------

// BaseReponse

// uint64 from = 1;
inline void BaseReponse::clear_from() {
  from_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseReponse::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseReponse::from() const {
  // @@protoc_insertion_point(field_get:srv.BaseReponse.from)
  return _internal_from();
}
inline void BaseReponse::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  from_ = value;
}
inline void BaseReponse::set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:srv.BaseReponse.from)
}

// uint64 to = 2;
inline void BaseReponse::clear_to() {
  to_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseReponse::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseReponse::to() const {
  // @@protoc_insertion_point(field_get:srv.BaseReponse.to)
  return _internal_to();
}
inline void BaseReponse::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  to_ = value;
}
inline void BaseReponse::set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:srv.BaseReponse.to)
}

// .google.protobuf.Timestamp create_at = 3;
inline bool BaseReponse::_internal_has_create_at() const {
  return this != internal_default_instance() && create_at_ != nullptr;
}
inline bool BaseReponse::has_create_at() const {
  return _internal_has_create_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BaseReponse::_internal_create_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BaseReponse::create_at() const {
  // @@protoc_insertion_point(field_get:srv.BaseReponse.create_at)
  return _internal_create_at();
}
inline void BaseReponse::unsafe_arena_set_allocated_create_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  create_at_ = create_at;
  if (create_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.BaseReponse.create_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BaseReponse::release_create_at() {
  auto temp = unsafe_arena_release_create_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BaseReponse::unsafe_arena_release_create_at() {
  // @@protoc_insertion_point(field_release:srv.BaseReponse.create_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_at_;
  create_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BaseReponse::_internal_mutable_create_at() {
  
  if (create_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_at_ = p;
  }
  return create_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BaseReponse::mutable_create_at() {
  // @@protoc_insertion_point(field_mutable:srv.BaseReponse.create_at)
  return _internal_mutable_create_at();
}
inline void BaseReponse::set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  if (create_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at)->GetArena();
    if (message_arena != submessage_arena) {
      create_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_at, submessage_arena);
    }
    
  } else {
    
  }
  create_at_ = create_at;
  // @@protoc_insertion_point(field_set_allocated:srv.BaseReponse.create_at)
}

// string message = 4;
inline void BaseReponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BaseReponse::message() const {
  // @@protoc_insertion_point(field_get:srv.BaseReponse.message)
  return _internal_message();
}
inline void BaseReponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:srv.BaseReponse.message)
}
inline std::string* BaseReponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:srv.BaseReponse.message)
  return _internal_mutable_message();
}
inline const std::string& BaseReponse::_internal_message() const {
  return message_.Get();
}
inline void BaseReponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseReponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:srv.BaseReponse.message)
}
inline void BaseReponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:srv.BaseReponse.message)
}
inline void BaseReponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:srv.BaseReponse.message)
}
inline std::string* BaseReponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseReponse::release_message() {
  // @@protoc_insertion_point(field_release:srv.BaseReponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseReponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:srv.BaseReponse.message)
}
inline std::string* BaseReponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:srv.BaseReponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BaseReponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.BaseReponse.message)
}

// -------------------------------------------------------------------

// ChangeFriendStatusRequest

// uint64 from = 1;
inline void ChangeFriendStatusRequest::clear_from() {
  from_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChangeFriendStatusRequest::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChangeFriendStatusRequest::from() const {
  // @@protoc_insertion_point(field_get:srv.ChangeFriendStatusRequest.from)
  return _internal_from();
}
inline void ChangeFriendStatusRequest::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  from_ = value;
}
inline void ChangeFriendStatusRequest::set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:srv.ChangeFriendStatusRequest.from)
}

// uint64 to = 2;
inline void ChangeFriendStatusRequest::clear_to() {
  to_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChangeFriendStatusRequest::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChangeFriendStatusRequest::to() const {
  // @@protoc_insertion_point(field_get:srv.ChangeFriendStatusRequest.to)
  return _internal_to();
}
inline void ChangeFriendStatusRequest::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  to_ = value;
}
inline void ChangeFriendStatusRequest::set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:srv.ChangeFriendStatusRequest.to)
}

// string status = 3;
inline void ChangeFriendStatusRequest::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChangeFriendStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:srv.ChangeFriendStatusRequest.status)
  return _internal_status();
}
inline void ChangeFriendStatusRequest::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:srv.ChangeFriendStatusRequest.status)
}
inline std::string* ChangeFriendStatusRequest::mutable_status() {
  // @@protoc_insertion_point(field_mutable:srv.ChangeFriendStatusRequest.status)
  return _internal_mutable_status();
}
inline const std::string& ChangeFriendStatusRequest::_internal_status() const {
  return status_.Get();
}
inline void ChangeFriendStatusRequest::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChangeFriendStatusRequest::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:srv.ChangeFriendStatusRequest.status)
}
inline void ChangeFriendStatusRequest::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:srv.ChangeFriendStatusRequest.status)
}
inline void ChangeFriendStatusRequest::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:srv.ChangeFriendStatusRequest.status)
}
inline std::string* ChangeFriendStatusRequest::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChangeFriendStatusRequest::release_status() {
  // @@protoc_insertion_point(field_release:srv.ChangeFriendStatusRequest.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangeFriendStatusRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:srv.ChangeFriendStatusRequest.status)
}
inline std::string* ChangeFriendStatusRequest::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:srv.ChangeFriendStatusRequest.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChangeFriendStatusRequest::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.ChangeFriendStatusRequest.status)
}

// .google.protobuf.Timestamp create_at = 4;
inline bool ChangeFriendStatusRequest::_internal_has_create_at() const {
  return this != internal_default_instance() && create_at_ != nullptr;
}
inline bool ChangeFriendStatusRequest::has_create_at() const {
  return _internal_has_create_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ChangeFriendStatusRequest::_internal_create_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ChangeFriendStatusRequest::create_at() const {
  // @@protoc_insertion_point(field_get:srv.ChangeFriendStatusRequest.create_at)
  return _internal_create_at();
}
inline void ChangeFriendStatusRequest::unsafe_arena_set_allocated_create_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  create_at_ = create_at;
  if (create_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.ChangeFriendStatusRequest.create_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChangeFriendStatusRequest::release_create_at() {
  auto temp = unsafe_arena_release_create_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChangeFriendStatusRequest::unsafe_arena_release_create_at() {
  // @@protoc_insertion_point(field_release:srv.ChangeFriendStatusRequest.create_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_at_;
  create_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChangeFriendStatusRequest::_internal_mutable_create_at() {
  
  if (create_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_at_ = p;
  }
  return create_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ChangeFriendStatusRequest::mutable_create_at() {
  // @@protoc_insertion_point(field_mutable:srv.ChangeFriendStatusRequest.create_at)
  return _internal_mutable_create_at();
}
inline void ChangeFriendStatusRequest::set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  if (create_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at)->GetArena();
    if (message_arena != submessage_arena) {
      create_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_at, submessage_arena);
    }
    
  } else {
    
  }
  create_at_ = create_at;
  // @@protoc_insertion_point(field_set_allocated:srv.ChangeFriendStatusRequest.create_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace srv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_friend_5fservice_2eproto
