// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend_service.proto

#include "friend_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_friend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Friend_friend_2eproto;
namespace srv {
class ListUserFriendsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUserFriendsRequest> _instance;
} _ListUserFriendsRequest_default_instance_;
class ListUserFriendsReponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUserFriendsReponse> _instance;
} _ListUserFriendsReponse_default_instance_;
class BaseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseRequest> _instance;
} _BaseRequest_default_instance_;
class BaseReponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseReponse> _instance;
} _BaseReponse_default_instance_;
class ChangeFriendStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeFriendStatusRequest> _instance;
} _ChangeFriendStatusRequest_default_instance_;
}  // namespace srv
static void InitDefaultsscc_info_BaseReponse_friend_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_BaseReponse_default_instance_;
    new (ptr) ::srv::BaseReponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::BaseReponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BaseReponse_friend_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BaseReponse_friend_5fservice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_BaseRequest_friend_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_BaseRequest_default_instance_;
    new (ptr) ::srv::BaseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::BaseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BaseRequest_friend_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BaseRequest_friend_5fservice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ChangeFriendStatusRequest_friend_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_ChangeFriendStatusRequest_default_instance_;
    new (ptr) ::srv::ChangeFriendStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::ChangeFriendStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChangeFriendStatusRequest_friend_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChangeFriendStatusRequest_friend_5fservice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ListUserFriendsReponse_friend_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_ListUserFriendsReponse_default_instance_;
    new (ptr) ::srv::ListUserFriendsReponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::ListUserFriendsReponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListUserFriendsReponse_friend_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListUserFriendsReponse_friend_5fservice_2eproto}, {
      &scc_info_Friend_friend_2eproto.base,}};

static void InitDefaultsscc_info_ListUserFriendsRequest_friend_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_ListUserFriendsRequest_default_instance_;
    new (ptr) ::srv::ListUserFriendsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::ListUserFriendsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListUserFriendsRequest_friend_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListUserFriendsRequest_friend_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_friend_5fservice_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_friend_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_friend_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_friend_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::ListUserFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::ListUserFriendsRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::ListUserFriendsReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::ListUserFriendsReponse, friends_),
  PROTOBUF_FIELD_OFFSET(::srv::ListUserFriendsReponse, sent_requests_),
  PROTOBUF_FIELD_OFFSET(::srv::ListUserFriendsReponse, received_requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::BaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::BaseRequest, from_),
  PROTOBUF_FIELD_OFFSET(::srv::BaseRequest, to_),
  PROTOBUF_FIELD_OFFSET(::srv::BaseRequest, create_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::BaseReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::BaseReponse, from_),
  PROTOBUF_FIELD_OFFSET(::srv::BaseReponse, to_),
  PROTOBUF_FIELD_OFFSET(::srv::BaseReponse, create_at_),
  PROTOBUF_FIELD_OFFSET(::srv::BaseReponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::ChangeFriendStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::ChangeFriendStatusRequest, from_),
  PROTOBUF_FIELD_OFFSET(::srv::ChangeFriendStatusRequest, to_),
  PROTOBUF_FIELD_OFFSET(::srv::ChangeFriendStatusRequest, status_),
  PROTOBUF_FIELD_OFFSET(::srv::ChangeFriendStatusRequest, create_at_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::srv::ListUserFriendsRequest)},
  { 6, -1, sizeof(::srv::ListUserFriendsReponse)},
  { 14, -1, sizeof(::srv::BaseRequest)},
  { 22, -1, sizeof(::srv::BaseReponse)},
  { 31, -1, sizeof(::srv::ChangeFriendStatusRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_ListUserFriendsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_ListUserFriendsReponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_BaseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_BaseReponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_ChangeFriendStatusRequest_default_instance_),
};

const char descriptor_table_protodef_friend_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024friend_service.proto\022\003srv\032\014friend.prot"
  "o\032\037google/protobuf/timestamp.proto\032 goog"
  "le/protobuf/field_mask.proto\032\033google/pro"
  "tobuf/empty.proto\")\n\026ListUserFriendsRequ"
  "est\022\017\n\007user_id\030\001 \001(\004\"\202\001\n\026ListUserFriends"
  "Reponse\022\034\n\007friends\030\001 \003(\0132\013.msg.Friend\022\"\n"
  "\rsent_requests\030\002 \003(\0132\013.msg.Friend\022&\n\021rec"
  "eived_requests\030\003 \003(\0132\013.msg.Friend\"V\n\013Bas"
  "eRequest\022\014\n\004from\030\001 \001(\004\022\n\n\002to\030\002 \001(\004\022-\n\tcr"
  "eate_at\030\003 \001(\0132\032.google.protobuf.Timestam"
  "p\"g\n\013BaseReponse\022\014\n\004from\030\001 \001(\004\022\n\n\002to\030\002 \001"
  "(\004\022-\n\tcreate_at\030\003 \001(\0132\032.google.protobuf."
  "Timestamp\022\017\n\007message\030\004 \001(\t\"t\n\031ChangeFrie"
  "ndStatusRequest\022\014\n\004from\030\001 \001(\004\022\n\n\002to\030\002 \001("
  "\004\022\016\n\006status\030\003 \001(\t\022-\n\tcreate_at\030\004 \001(\0132\032.g"
  "oogle.protobuf.Timestamp2\224\002\n\rFriendServi"
  "ce\022M\n\017ListUserFriends\022\033.srv.ListUserFrie"
  "ndsRequest\032\033.srv.ListUserFriendsReponse\""
  "\000\0224\n\014CreateFriend\022\020.srv.BaseRequest\032\020.sr"
  "v.BaseReponse\"\000\0224\n\014DeleteFriend\022\020.srv.Ba"
  "seRequest\032\020.srv.BaseReponse\"\000\022H\n\022ChangeF"
  "riendStatus\022\036.srv.ChangeFriendStatusRequ"
  "est\032\020.srv.BaseReponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_friend_5fservice_2eproto_deps[4] = {
  &::descriptor_table_friend_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_friend_5fservice_2eproto_sccs[5] = {
  &scc_info_BaseReponse_friend_5fservice_2eproto.base,
  &scc_info_BaseRequest_friend_5fservice_2eproto.base,
  &scc_info_ChangeFriendStatusRequest_friend_5fservice_2eproto.base,
  &scc_info_ListUserFriendsReponse_friend_5fservice_2eproto.base,
  &scc_info_ListUserFriendsRequest_friend_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_friend_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friend_5fservice_2eproto = {
  false, false, descriptor_table_protodef_friend_5fservice_2eproto, "friend_service.proto", 911,
  &descriptor_table_friend_5fservice_2eproto_once, descriptor_table_friend_5fservice_2eproto_sccs, descriptor_table_friend_5fservice_2eproto_deps, 5, 4,
  schemas, file_default_instances, TableStruct_friend_5fservice_2eproto::offsets,
  file_level_metadata_friend_5fservice_2eproto, 5, file_level_enum_descriptors_friend_5fservice_2eproto, file_level_service_descriptors_friend_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_friend_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_friend_5fservice_2eproto)), true);
namespace srv {

// ===================================================================

void ListUserFriendsRequest::InitAsDefaultInstance() {
}
class ListUserFriendsRequest::_Internal {
 public:
};

ListUserFriendsRequest::ListUserFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.ListUserFriendsRequest)
}
ListUserFriendsRequest::ListUserFriendsRequest(const ListUserFriendsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:srv.ListUserFriendsRequest)
}

void ListUserFriendsRequest::SharedCtor() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}

ListUserFriendsRequest::~ListUserFriendsRequest() {
  // @@protoc_insertion_point(destructor:srv.ListUserFriendsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListUserFriendsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListUserFriendsRequest::ArenaDtor(void* object) {
  ListUserFriendsRequest* _this = reinterpret_cast< ListUserFriendsRequest* >(object);
  (void)_this;
}
void ListUserFriendsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUserFriendsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUserFriendsRequest& ListUserFriendsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUserFriendsRequest_friend_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ListUserFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.ListUserFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUserFriendsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserFriendsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.ListUserFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.ListUserFriendsRequest)
  return target;
}

size_t ListUserFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.ListUserFriendsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUserFriendsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.ListUserFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUserFriendsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUserFriendsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.ListUserFriendsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.ListUserFriendsRequest)
    MergeFrom(*source);
  }
}

void ListUserFriendsRequest::MergeFrom(const ListUserFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.ListUserFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void ListUserFriendsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.ListUserFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserFriendsRequest::CopyFrom(const ListUserFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.ListUserFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserFriendsRequest::IsInitialized() const {
  return true;
}

void ListUserFriendsRequest::InternalSwap(ListUserFriendsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserFriendsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUserFriendsReponse::InitAsDefaultInstance() {
}
class ListUserFriendsReponse::_Internal {
 public:
};

void ListUserFriendsReponse::clear_friends() {
  friends_.Clear();
}
void ListUserFriendsReponse::clear_sent_requests() {
  sent_requests_.Clear();
}
void ListUserFriendsReponse::clear_received_requests() {
  received_requests_.Clear();
}
ListUserFriendsReponse::ListUserFriendsReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  friends_(arena),
  sent_requests_(arena),
  received_requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.ListUserFriendsReponse)
}
ListUserFriendsReponse::ListUserFriendsReponse(const ListUserFriendsReponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      friends_(from.friends_),
      sent_requests_(from.sent_requests_),
      received_requests_(from.received_requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:srv.ListUserFriendsReponse)
}

void ListUserFriendsReponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUserFriendsReponse_friend_5fservice_2eproto.base);
}

ListUserFriendsReponse::~ListUserFriendsReponse() {
  // @@protoc_insertion_point(destructor:srv.ListUserFriendsReponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListUserFriendsReponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListUserFriendsReponse::ArenaDtor(void* object) {
  ListUserFriendsReponse* _this = reinterpret_cast< ListUserFriendsReponse* >(object);
  (void)_this;
}
void ListUserFriendsReponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUserFriendsReponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUserFriendsReponse& ListUserFriendsReponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUserFriendsReponse_friend_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ListUserFriendsReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.ListUserFriendsReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  sent_requests_.Clear();
  received_requests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUserFriendsReponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.Friend friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .msg.Friend sent_requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sent_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .msg.Friend received_requests = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_received_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserFriendsReponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.ListUserFriendsReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.Friend friends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_friends(i), target, stream);
  }

  // repeated .msg.Friend sent_requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sent_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_sent_requests(i), target, stream);
  }

  // repeated .msg.Friend received_requests = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_received_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_received_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.ListUserFriendsReponse)
  return target;
}

size_t ListUserFriendsReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.ListUserFriendsReponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Friend friends = 1;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.Friend sent_requests = 2;
  total_size += 1UL * this->_internal_sent_requests_size();
  for (const auto& msg : this->sent_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.Friend received_requests = 3;
  total_size += 1UL * this->_internal_received_requests_size();
  for (const auto& msg : this->received_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUserFriendsReponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.ListUserFriendsReponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUserFriendsReponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUserFriendsReponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.ListUserFriendsReponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.ListUserFriendsReponse)
    MergeFrom(*source);
  }
}

void ListUserFriendsReponse::MergeFrom(const ListUserFriendsReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.ListUserFriendsReponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  sent_requests_.MergeFrom(from.sent_requests_);
  received_requests_.MergeFrom(from.received_requests_);
}

void ListUserFriendsReponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.ListUserFriendsReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserFriendsReponse::CopyFrom(const ListUserFriendsReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.ListUserFriendsReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserFriendsReponse::IsInitialized() const {
  return true;
}

void ListUserFriendsReponse::InternalSwap(ListUserFriendsReponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  friends_.InternalSwap(&other->friends_);
  sent_requests_.InternalSwap(&other->sent_requests_);
  received_requests_.InternalSwap(&other->received_requests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserFriendsReponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseRequest::InitAsDefaultInstance() {
  ::srv::_BaseRequest_default_instance_._instance.get_mutable()->create_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class BaseRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_at(const BaseRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
BaseRequest::_Internal::create_at(const BaseRequest* msg) {
  return *msg->create_at_;
}
void BaseRequest::clear_create_at() {
  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
}
BaseRequest::BaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.BaseRequest)
}
BaseRequest::BaseRequest(const BaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_create_at()) {
    create_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_at_);
  } else {
    create_at_ = nullptr;
  }
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:srv.BaseRequest)
}

void BaseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseRequest_friend_5fservice_2eproto.base);
  ::memset(&create_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&create_at_)) + sizeof(to_));
}

BaseRequest::~BaseRequest() {
  // @@protoc_insertion_point(destructor:srv.BaseRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete create_at_;
}

void BaseRequest::ArenaDtor(void* object) {
  BaseRequest* _this = reinterpret_cast< BaseRequest* >(object);
  (void)_this;
}
void BaseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseRequest& BaseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseRequest_friend_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.BaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.BaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_from(), target);
  }

  // uint64 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_to(), target);
  }

  // .google.protobuf.Timestamp create_at = 3;
  if (this->has_create_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::create_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.BaseRequest)
  return target;
}

size_t BaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.BaseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp create_at = 3;
  if (this->has_create_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_at_);
  }

  // uint64 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_from());
  }

  // uint64 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.BaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.BaseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.BaseRequest)
    MergeFrom(*source);
  }
}

void BaseRequest::MergeFrom(const BaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.BaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_create_at()) {
    _internal_mutable_create_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_at());
  }
  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
}

void BaseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.BaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseRequest::CopyFrom(const BaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.BaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseRequest::IsInitialized() const {
  return true;
}

void BaseRequest::InternalSwap(BaseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseRequest, to_)
      + sizeof(BaseRequest::to_)
      - PROTOBUF_FIELD_OFFSET(BaseRequest, create_at_)>(
          reinterpret_cast<char*>(&create_at_),
          reinterpret_cast<char*>(&other->create_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseReponse::InitAsDefaultInstance() {
  ::srv::_BaseReponse_default_instance_._instance.get_mutable()->create_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class BaseReponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_at(const BaseReponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
BaseReponse::_Internal::create_at(const BaseReponse* msg) {
  return *msg->create_at_;
}
void BaseReponse::clear_create_at() {
  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
}
BaseReponse::BaseReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.BaseReponse)
}
BaseReponse::BaseReponse(const BaseReponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_create_at()) {
    create_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_at_);
  } else {
    create_at_ = nullptr;
  }
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:srv.BaseReponse)
}

void BaseReponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseReponse_friend_5fservice_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&create_at_)) + sizeof(to_));
}

BaseReponse::~BaseReponse() {
  // @@protoc_insertion_point(destructor:srv.BaseReponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseReponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_at_;
}

void BaseReponse::ArenaDtor(void* object) {
  BaseReponse* _this = reinterpret_cast< BaseReponse* >(object);
  (void)_this;
}
void BaseReponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseReponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseReponse& BaseReponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseReponse_friend_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BaseReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.BaseReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseReponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "srv.BaseReponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseReponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.BaseReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_from(), target);
  }

  // uint64 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_to(), target);
  }

  // .google.protobuf.Timestamp create_at = 3;
  if (this->has_create_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::create_at(this), target, stream);
  }

  // string message = 4;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "srv.BaseReponse.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.BaseReponse)
  return target;
}

size_t BaseReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.BaseReponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 4;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp create_at = 3;
  if (this->has_create_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_at_);
  }

  // uint64 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_from());
  }

  // uint64 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseReponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.BaseReponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseReponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseReponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.BaseReponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.BaseReponse)
    MergeFrom(*source);
  }
}

void BaseReponse::MergeFrom(const BaseReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.BaseReponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_create_at()) {
    _internal_mutable_create_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_at());
  }
  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
}

void BaseReponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.BaseReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseReponse::CopyFrom(const BaseReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.BaseReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseReponse::IsInitialized() const {
  return true;
}

void BaseReponse::InternalSwap(BaseReponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseReponse, to_)
      + sizeof(BaseReponse::to_)
      - PROTOBUF_FIELD_OFFSET(BaseReponse, create_at_)>(
          reinterpret_cast<char*>(&create_at_),
          reinterpret_cast<char*>(&other->create_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseReponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeFriendStatusRequest::InitAsDefaultInstance() {
  ::srv::_ChangeFriendStatusRequest_default_instance_._instance.get_mutable()->create_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ChangeFriendStatusRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_at(const ChangeFriendStatusRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ChangeFriendStatusRequest::_Internal::create_at(const ChangeFriendStatusRequest* msg) {
  return *msg->create_at_;
}
void ChangeFriendStatusRequest::clear_create_at() {
  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
}
ChangeFriendStatusRequest::ChangeFriendStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.ChangeFriendStatusRequest)
}
ChangeFriendStatusRequest::ChangeFriendStatusRequest(const ChangeFriendStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  if (from._internal_has_create_at()) {
    create_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_at_);
  } else {
    create_at_ = nullptr;
  }
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:srv.ChangeFriendStatusRequest)
}

void ChangeFriendStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeFriendStatusRequest_friend_5fservice_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&create_at_)) + sizeof(to_));
}

ChangeFriendStatusRequest::~ChangeFriendStatusRequest() {
  // @@protoc_insertion_point(destructor:srv.ChangeFriendStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeFriendStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_at_;
}

void ChangeFriendStatusRequest::ArenaDtor(void* object) {
  ChangeFriendStatusRequest* _this = reinterpret_cast< ChangeFriendStatusRequest* >(object);
  (void)_this;
}
void ChangeFriendStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeFriendStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeFriendStatusRequest& ChangeFriendStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeFriendStatusRequest_friend_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ChangeFriendStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.ChangeFriendStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeFriendStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "srv.ChangeFriendStatusRequest.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeFriendStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.ChangeFriendStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_from(), target);
  }

  // uint64 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_to(), target);
  }

  // string status = 3;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "srv.ChangeFriendStatusRequest.status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp create_at = 4;
  if (this->has_create_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::create_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.ChangeFriendStatusRequest)
  return target;
}

size_t ChangeFriendStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.ChangeFriendStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 3;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .google.protobuf.Timestamp create_at = 4;
  if (this->has_create_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_at_);
  }

  // uint64 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_from());
  }

  // uint64 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeFriendStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.ChangeFriendStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeFriendStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeFriendStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.ChangeFriendStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.ChangeFriendStatusRequest)
    MergeFrom(*source);
  }
}

void ChangeFriendStatusRequest::MergeFrom(const ChangeFriendStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.ChangeFriendStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.has_create_at()) {
    _internal_mutable_create_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_at());
  }
  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
}

void ChangeFriendStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.ChangeFriendStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFriendStatusRequest::CopyFrom(const ChangeFriendStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.ChangeFriendStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFriendStatusRequest::IsInitialized() const {
  return true;
}

void ChangeFriendStatusRequest::InternalSwap(ChangeFriendStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeFriendStatusRequest, to_)
      + sizeof(ChangeFriendStatusRequest::to_)
      - PROTOBUF_FIELD_OFFSET(ChangeFriendStatusRequest, create_at_)>(
          reinterpret_cast<char*>(&create_at_),
          reinterpret_cast<char*>(&other->create_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeFriendStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace srv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::srv::ListUserFriendsRequest* Arena::CreateMaybeMessage< ::srv::ListUserFriendsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::ListUserFriendsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::ListUserFriendsReponse* Arena::CreateMaybeMessage< ::srv::ListUserFriendsReponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::ListUserFriendsReponse >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::BaseRequest* Arena::CreateMaybeMessage< ::srv::BaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::BaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::BaseReponse* Arena::CreateMaybeMessage< ::srv::BaseReponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::BaseReponse >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::ChangeFriendStatusRequest* Arena::CreateMaybeMessage< ::srv::ChangeFriendStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::ChangeFriendStatusRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
